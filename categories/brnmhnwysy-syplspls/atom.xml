<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[طبقه‌بندی‌هابرنامه‌نویسی,سی‌پلاس‌پلاس | اختاپوس خسته]]></title>
  <link href="http://soroush.github.io/categories/brnmhnwysy-syplspls/atom.xml" rel="self"/>
  <link href="http://soroush.github.io/"/>
  <updated>2017-09-16T00:20:07+04:30</updated>
  <id>http://soroush.github.io/</id>
  <author>
    <name><![CDATA[سروش]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[فلسفهٔ ‪C++‬]]></title>
    <link href="http://soroush.github.io/blog/the-c-plus-plus/"/>
    <updated>2015-07-04T00:00:00+04:30</updated>
    <id>http://soroush.github.io/blog/the-c-plus-plus</id>
    <content type="html"><![CDATA[<p>توی دنیای تکنولوژی اگر از یک ابزار استفاده می‌کنیم باید سعی داشته باشیم اون رو
به بهترین شکل ممکن بشناسیم. مخصوصاً در مورد زبان‌های برنامه‌نویسی که ما
مهندس‌های کامپیوتر شب و روزمون با این‌ها می‌گذره. شناختن یک زبان برنامه‌نویسی
به معنی بلد بودن تمامی امکانات اون نیست. بلکه باید <em>فلسفه</em>‌ی اون زبان رو
بررسی کرد. و این که برای کارهایی که می‌خوایم انجام بدیم قبولش داریم یا نه. و
این که اصلاً برای کار ما مناسب هست یا نه.</p>

<p>توی این پست سعی می‌کنم مهم‌ترین نکات <em>استاندارد</em> و <em>فلسفهٔ ‪C++‬</em> رو مطرح کنم.</p>

<h1>استاندارد</h1>

<p>زبان ‪C++‬ یک استاندارد مدون و واضح داره که توش مشخص شده هر کدی که می‌نویسیم،
چه معنی‌ای داره و چه رفتاری داره. در بعضی موارد رفتارهای نامشخص تعیین شده (این
یعنی اگه فلان کارِ نادرست رو انجام بدید بسته به کامپایلر و سیستم‌عامل‌تون هر
اتفاقی می‌تونه بیفته).</p>

<p>استراستروپ، سازندهٔ ‪C++‬، فلسفهٔ این زبان رو توی مقاله‌ای که سال ۲۰۰۶ منتشر
کرد به‌طور غیررسمی معرفی کرده. این اصول، نحوهٔ بررسی پروپوزال‌ها و معیارهای
ارزیابی استاندارد رو به‌طور کلی مشخص می‌کنه.</p>

<ul>
<li>این زبان باید برای حل مسائل دنیای واقعی به‌کار برود و ویژگی‌های آن باید
بلافاصله قابل استفاده در برنامه‌های واقعی باشد.</li>
<li>هر ویژگی‌ای باید (طبق یک روش واضح و معقول) قابل پیاده‌سازی باشد.</li>
<li>برنامه‌نویسان باید در انتخاب سبک برنامه‌نویسی آزاد باشند، و سبک‌های موردنظر
باید به‌طور کامل توسط ‪C++‬ پشتیبانی شوند.</li>
<li>پشتیبانی از یک ویژگی پراستفاده مهم‌تر است از جلوگیری از استفادهٔ نادرست از
‪C++‬.</li>
<li>باید امکاناتی برای سازمان‌دهی برنامه‌ها در قطعات خوش‌تعریف و امکاناتی برای
ترکیب قطعات توسعه‌داده شده وجود داشته باشد.</li>
<li>هیچ تخطی ضمنی از سیستم انتزاعی انواع وجود ندارد (ولی تخطی صریح، طوری که
برنامه‌نویس صراحتاً درخواست کرده باشد؛ مجاز است)</li>
<li>انواع داده‌های تعریف شده توسط کاربر باید پشتیبانی و کارایی انواع دادهٔ توکار
را داشته باشند.</li>
<li>امکانات استفاده نشده نباید برنامه‌های تولید شده را به شکل منفی تحت تأثیر قرار
دهد. (به‌عنوان مثال با کاهش کارایی)</li>
<li>هیچ زبانی در لایهٔ زیرین ‪C++‬ نباید وجود داشته باشد. (به‌غیر از اسمبلی)</li>
<li>‫‪C++‬ باید در کنار زبان‌های برنامه‌نویسی موجود کار کند و نباید محیط
برنامه‌نویسی آن، در صورت ناسازگاری [برای زبان‌های دیگر] اجبار شود.‬</li>
<li>اگر منظور برنامه‌نویس مشخص نیست، به برنامه‌نویس اجازهٔ کنترل دستی داده شود.</li>
</ul>


<p>در ادامه تک تک این موارد رو بررسی می‌کنیم.</p>

<h2>حل مسائل دنیای واقعی</h2>

<p>طبق تعریف، سی‌پی‌پی باید برای حل مسائل واقعی در دنیای واقعی به‌کار گرفته بشه.
این یعنی سی‌پلاس‌پلاس مخصوص محیط دانشگاه و پژوهش‌های علمی نیست. همین‌طور مخصوص
صنایع نیست. این اصل میگه که شما می‌تونید  برای انجام هر کاری از سی‌پلاس‌پلاس
استفاده کنید. چه موشک فرستادن به فضا باشه چه کنترل یک موتور در کارخونه یا
تحقیقات مربوط به تکامل بشر.</p>

<h2>ویژگی‌های قابل پیاده‌سازی</h2>

<p>سی‌پلاس‌پلاس یک استاندارده نه یک پیاده‌سازی. پیاده‌سازی‌های این استاندارد
کامپایلرها و کتابخانهٔ STL هستند. این اصل از فلسفهٔ CPP میگه که باید بتونیم
کامپایلری بسازیم که هر ویژگی‌ای که توی متن استاندارد پیش‌بینی شده رو پیاده‌سازی
کرده باشه.</p>

<h2>سبک‌های مستقل</h2>

<p>برنامه‌نویس‌ها باید بتونن سبک برنامه‌نویسی خودشون رو انتخاب کنند. برعکس
زبان‌هایی مثل سی‌شارپ که یک چهارچوب بسیار تنگ برای</p>

<h1>تغییرات بزرگ</h1>

<p>چند سالی هست
که ‪C++‬ تغییرات اساسی زیادی کرده. احتمالاً اسم‌هایی مثل ‪C++11‬ یا ‪C++14‬ به
گوشتون خورده باشه.</p>
]]></content>
  </entry>
  
</feed>
