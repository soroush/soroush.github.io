<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>برنامه‌نویسی on اختاپوس خسته</title>
    <link>https://soroush.github.io/fa/categories/%D8%A8%D8%B1%D9%86%D8%A7%D9%85%D9%87%D9%86%D9%88%DB%8C%D8%B3%DB%8C/</link>
    <description>Recent content in برنامه‌نویسی on اختاپوس خسته</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 02 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://soroush.github.io/fa/categories/%D8%A8%D8%B1%D9%86%D8%A7%D9%85%D9%87%D9%86%D9%88%DB%8C%D8%B3%DB%8C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>تقویم هجری خورشیدی در کیوت</title>
      <link>https://soroush.github.io/fa/1399/05/12/persian-calendar-in-qt/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://soroush.github.io/fa/1399/05/12/persian-calendar-in-qt/</guid>
      <description>&lt;p&gt;برای ما ایرانی‌ها استفاده از تقویم فارسی در محیط کامپیوتری همیشه چالش‌برانگیز
بوده. به‌طور سیستم‌های رایانه‌ای با درنظر داشتن امکان تغییر تقویم‌ها طراحی و
توسعه پیدا نمی‌کنند و ما همیشه مجبوریم جای خالی تقویم رسمی کشور - هجری خورشیدی -
رو با هک و روش‌های غیرمتعارف پر کنیم.&lt;/p&gt;
&lt;p&gt;برای من همیشه نبود تقویم هجری شمسی در کیوت آزاردهنده بوده. وقتی
می‌خواستم تاریخ رو داخل برنامه‌های ‪C++‬ نشون بدم؛ یا باید از ویجت‌هایی که خودم
ساختم استفاده می‌کردم یا به تاریخ گرگورین (میلادی) بسنده می‌کردم. از نسخهٔ ۴٫۶ و
دقیقاً بعد از زمانی که ترجمهٔ فارسی کیوت رو منتشر کردم، به فکر پیاده‌سازی تقویم
رسمی کشور توی این فریم‌ورک بودم. متأسفانه اون روزها امکان پیاده‌سازی به دلایل
محتلف وجود نداشت. با این حال اولین نمونه‌ها رو ساختم ولی به کیوت ۵ نرسید. کیوت ۵
داستان غم‌انگیز خودش رو داشت و با انتشار نسخهٔ نارس ۵٬۰٬۰ ؛ فرصتی که با تغییر
نسخه از چهار به پنج به وجود آمده بود هم از دست رفت. اما بالأخره بعد از گذشت ۶
سال و فراموش شدن موضوع تونستم تقویم هجری خورشیدی رو برای کیوت ۵٫۱۰ پیاده‌سازی
کنم. نسخهٔ نهایی همراه با کیوت ۵٫۱۴ در تاریخ ۲۱ آذر سال ۱۳۹۸ منتشر شد. این پست
به چالش‌ها و روال توسعهٔ تقویم و نحوهٔ استفاده از API اختصاص داده شده.
&lt;figure&gt;
    &lt;img src=&#34;https://soroush.github.io/fa/fa/static/images/jalali.gif&#34;/&gt; &lt;figcaption&gt;
            &lt;h4&gt;نمونهٔ اجرا&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>مشکل نیم‌فاصله در KDE و روش حل آن</title>
      <link>https://soroush.github.io/fa/kates-zwnj-bug/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://soroush.github.io/fa/kates-zwnj-bug/</guid>
      <description>&lt;p&gt;قبلاً در مورد
&lt;a href=&#34;https://soroush.github.io/fa/1396/02/19/worst-ever-bug/&#34;&gt;باگ بسیار بدی&lt;/a&gt;
که در کیوت به‌وجود آمده بود و روش حل آن نوشتم. این
باگ باعث میشد امکان نوشتن نویسه‌های کنترلی مثل نیم‌فاصله و تغییر جهت
به‌طور کامل از بین بره. (اگر از نیم‌فاصله استفاده نمی‌کنید و یا نمی‌دونید تغییر
جهت متن چه اهمیتی داره حتماً
&lt;a href=&#34;https://soroush.github.io/fa/1393/06/27/unicode-bidi/&#34;&gt;نویسه‌های کنترلی و جهت‌دهی متون فارسی/انگلیسی&lt;/a&gt;
رو بخونید)&lt;/p&gt;
&lt;p&gt;الآن با گذشت چند ماه باگ مربوطه برطرف شده و با نسخهٔ 5.9.1 منتشر شده.
(تغیرات گریت برای ماژول qtbase
&lt;a href=&#34;https://codereview.qt-project.org/#/c/179219/&#34;&gt;اینجا&lt;/a&gt;
و برای ماژول qtdeclarative
&lt;a href=&#34;https://codereview.qt-project.org/#/c/179258/&#34;&gt;اینجا&lt;/a&gt;
قابل مشاهده هستند)
خوشبختانه برنامه‌های کیوت دیگه مشکل سابق رو ندارند و هم توی ماژول widgets و هم
توی ماژول جدیدتر Qt Quick مشکل به‌طور کامل برطرف شده. خوب حداقل من این‌طور فکر
می‌کردم!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>برنامه‌نویسی شبکه در ویندوز/لینوکس: libcpnet</title>
      <link>https://soroush.github.io/fa/1396/06/20/libcpnet/</link>
      <pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://soroush.github.io/fa/1396/06/20/libcpnet/</guid>
      <description>&lt;p&gt;کارفرمای کاری که الان دارم انجام میدم اصرار داره که برنامه‌ش علاوه‌بر لینوکس روی
ویندوز هم به‌خوبی اجرا بشه. مدیر من کاملاً این محدودیت رو پذیرفته و به کارفرما
گفته که با سخت‌افزاری که مشخصاتش رو اعلام می‌کنیم و با مشخصات کارکردی که اعلام
می‌کنیم، روی ویندوز هم می‌تونید برنامه رو اجرا کنید. خوب این تصمیم مشکلات بسیار
بزرگی برای برنامه‌نویس به‌وجود میاره. ازجمله برنامه‌نویسی شبکه&amp;hellip; این پست به
بررسی این مشکلات و ارائهٔ یک راه حل خوب خواهد پرداخت (: اگر قصد دارید کدی
بنویسید که هم روی ویندوز و هم روی سیستم‌عامل‌های واقعی بتونه از شبکه استفاده
کنه
حتماً ادامهٔ مطلب رو بخونید.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>توسعهٔ میان‌نسخه‌ای</title>
      <link>https://soroush.github.io/fa/cross-qt-development/</link>
      <pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://soroush.github.io/fa/cross-qt-development/</guid>
      <description>&lt;p&gt;سال گذشته توی
&lt;a href=&#34;http://onealonebit.wordpress.com/2013/09/10/cross-qt-development&#34;&gt;وبلاگ انگلیسی‌م&lt;/a&gt;
پستی در مورد توسعهٔ نرم‌افزار بین نسخه‌های مختلف کیوت
نوشته بودم که مدت‌هاست وقت نکردم ترجمه‌ش کنم. این پست در مورد توضیح یک روش
کارامد برای کدنویسی بین
نسخهٔ ۴ و ۵ کیوت هست اما میشه کلیت‌ش رو به تمام چارچوب‌ها و کتابخانه‌هایی که در
یک بازهٔ زمانی چند نسخه دارند، تعمیم داد. برای برنامه‌هایی که به‌طور طولانی‌مدت
پشتیبانی میشن، این شرایط خیلی زیاد پیش میاد.فرض کنید برنامه‌ای نوشته میشه که
قراره با ZMQ نسخهٔ ۲ کار کنه. بعد از گذشت چند سال توسعه‌دهنده‌ها به این نتیجه
می‌رسن که باید نسخهٔ ۳ پشتیبانی بشه و پکیج‌هایی از کدهای کامپایل شده با نسخهٔ ۳
تهیه بشه. بنابراین بهترین راه حل نوشتن کدی هست که با هر دو نسخه کامپایل بشه.
برای ابزارهایی که کتابخانه نیستند هم همین صادق هست. مثلاً اسکریپتی که قراره با
پایتون ۲ کار کنه اما باید با پایتون ۳ هم کار کنه.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>توسعهٔ چندسکویی</title>
      <link>https://soroush.github.io/fa/cross-platform-development/</link>
      <pubDate>Thu, 18 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://soroush.github.io/fa/cross-platform-development/</guid>
      <description>&lt;p&gt;دوست دارم برنامه‌ها و کتابخونه‌هام روی پلتفرم‌های مختلف اجرا بشن. هرچه بیشتر
بهتر! البته همیشه هدف اصلی همیشه
&lt;a href=&#34;http://en.wikipedia.org/wiki/Linux&#34;&gt;لینوکس&lt;/a&gt;
و &lt;a href=&#34;http://en.wikipedia.org/wiki/Unix-like&#34;&gt;سیستم‌های شبه‌یونیکس&lt;/a&gt; هستند. با این
حال بدم نمیاد که عملکرد مشابهی رو برای ویندوز و اندرویید، شاید هم مک‌اواس فراهم
کنم. در واقع &lt;strong&gt;پلتفرم&lt;/strong&gt; نباید یک محدودیت برای استفاده از نرم‌افزار باشه. مجموع
این‌ها ما رو به ایدهٔ
&lt;a href=&#34;http://en.wikipedia.org/wiki/Cross-platform&#34;&gt;توسعهٔ چندسکویی&lt;/a&gt;
می‌رسونه. متأسفانه این کار چندان ساده هم نیست. استاندارد پذیرفته‌شده‌ای برای
APIهای
سیستم‌عامل‌ها وجود نداره. همچنین هیچ الگوی کلی‌ای برای عملیات سیستم‌عامل
موجود نیست. توسعه‌دهنده‌ها باید با درنظر داشتن تمام نیازمندی‌های چندسکویی کد
بنویسند.&lt;/p&gt;
&lt;p&gt;توی این پست، تجربهٔ شخصی خودم رو در مورد توسعهٔ چندسکویی پروژهٔ AIT می‌نویسم.
توی اون پروژه به مشکلات زیادی برخوردم و تعدادی‌شون رو حل کردم. این نوشته یک
چک‌لیست ساده برای کسایی که می‌خوان توسعهٔ چندسکویی انجام بدن فراهم می‌کنه که
بتونن از مشکلات توسعهٔ چندسکویی با زبان‌های ‏‪C/C++‬ پیشگیری کنن. رفتیم که بریم :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>چطور پازل 8 را به روش ‪C&#43;&#43;‬ حل کنیم</title>
      <link>https://soroush.github.io/fa/how-to-solve-8-8-puzzle/</link>
      <pubDate>Fri, 21 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://soroush.github.io/fa/how-to-solve-8-8-puzzle/</guid>
      <description>اولین روز سال ۱۳۹۳ و اولین پست همین سال :) برای شروع سال چه چیزی بهتر از یه پازل فکری می‌تونه باشه؟ امروز جمعه‌ست و اول سال با آخر هفته شروع شده. آخرهفته‌ها فرصت مناسبی برای پروژه‌های کوچیک و جالب هست. خوب زومیت زحمت کشیده و پازل شمارهٔ ۳۱ام رو روز اول فروردین منتشر کرده. توی این پست می‌خوام توضیح بدم که چطوری این پازل رو حل کردم. در واقع تقلب کردم.</description>
    </item>
    
  </channel>
</rss>