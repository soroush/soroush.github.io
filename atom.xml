<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[اختاپوس خسته]]></title>
  <link href="https://soroush.github.io/atom.xml" rel="self"/>
  <link href="https://soroush.github.io/"/>
  <updated>2018-04-13T18:33:44+04:30</updated>
  <id>https://soroush.github.io/</id>
  <author>
    <name><![CDATA[سروش]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[محاسبهٔ ثابت‌های ریاضی]]></title>
    <link href="https://soroush.github.io/blog/calculate-pi-in-cpp/"/>
    <updated>2018-04-13T00:00:00+04:30</updated>
    <id>https://soroush.github.io/blog/calculate-pi-in-cpp</id>
    <content type="html"><![CDATA[<p>هیچ‌کدام از استانداردهای سی‌پلاس‌پلاس و یا سی عدد π را تعریف نکرده‌اند.
بنابراین هر برنامه‌نویسی که قصد داشته باشه از توابع مثلثاتی یا آماری استفاده
کنه مجبوره خودش π رو تعریف کنه. خوشبختانه فایل‌های سرآیند استاندارد عدد π
رو تعریف کرده‌اند، (ثابت <code>M_PI</code> در هدر <code>math.h</code> رو ببینید) با این وجود استفاده
از این ثابت و ثابت‌های دیگه بسیار خطرناک هست و برای کاربردهای دقیق باعث بروز
خطاهای عددی خواهد شد.</p>

<p>خوشبختانه میشه با صرف هزینهٔ صفر در زمان اجرا π رو به‌صورت استاندارد (با
تعاریف مشخص عددی) و البته در زمان کامپال محاسبه کرد. برای این کار از
meta-programming
به وسیلهٔ template ها در ‪C++‬ استفاده می‌کنیم. از مزایای این روش میشه به قابل
حمل بودن و پیروی کامل از استاندارد IEEE 754 اشاره کرد که از لحاظ دقت عددی و
یکسان بودن نتایج روی ماشین‌های مختلف بسیار مهم هست.</p>

<p>برای محاسبهٔ عدد π روش‌های مختلفی وجود داره. اکثر این روش‌ها براساس
محاسبهٔ یک سری یا دنباله هستند که در بینهایت به عدد پی همگرا میشه. یکی از
بهترین روش‌ها فرمول
<a href="http://crd-legacy.lbl.gov/~dhbailey/dhbpapers/pi-quest.%20pdf">Bailey–Borwein–Plouffe</a>
هست. اثبات میشه که:
$$\pi=\sum_{n=0}^{\infty}{\left[\frac{1}{16^{n}}\left(\frac{4}{8n+1}&ndash;\frac{2}{8n +4}&ndash;\frac{1}{8n+5}&ndash;\frac{1}{8n+6}\right)\right]}$$
بنابراین با این کد توی ‪C++‬ می‌تونیم به‌سادگی عدد پی رو تا هر تعداد تکرار که
میخواهیم حساب کنیم:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;cstdint&gt;</span>
</span><span class='line'><span class="cp">#include &lt;limits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="n">uint64_t</span> <span class="n">b</span><span class="p">,</span> <span class="n">uint64_t</span> <span class="n">e</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pow</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">const</span> <span class="n">uint64_t</span> <span class="n">result</span> <span class="o">=</span> <span class="n">b</span> <span class="o">*</span> <span class="n">pow</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">,</span> <span class="n">e</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;::</span><span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="n">uint64_t</span> <span class="n">b</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pow</span><span class="o">&lt;</span><span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">const</span> <span class="n">uint64_t</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="n">uint64_t</span> <span class="n">n</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">bbp</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">constexpr</span> <span class="k">static</span> <span class="kt">double</span> <span class="n">pi</span>
</span><span class='line'>            <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">/</span> <span class="n">pow</span><span class="o">&lt;</span><span class="mi">16</span><span class="p">,</span> <span class="n">n</span><span class="o">&gt;::</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>            <span class="o">*</span> <span class="p">(</span>   <span class="mf">4.0</span> <span class="o">/</span> <span class="p">(</span><span class="mi">8</span> <span class="o">*</span> <span class="n">n</span> <span class="o">+</span> <span class="mf">1.0</span><span class="p">)</span> <span class="o">-</span> <span class="mf">2.0</span> <span class="o">/</span> <span class="p">(</span><span class="mi">8</span> <span class="o">*</span> <span class="n">n</span> <span class="o">+</span> <span class="mf">4.0</span><span class="p">)</span>
</span><span class='line'>                <span class="o">-</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="p">(</span><span class="mi">8</span> <span class="o">*</span> <span class="n">n</span> <span class="o">+</span> <span class="mf">5.0</span><span class="p">)</span> <span class="o">-</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="p">(</span><span class="mi">8</span> <span class="o">*</span> <span class="n">n</span> <span class="o">+</span> <span class="mf">6.0</span><span class="p">))</span>
</span><span class='line'>            <span class="o">+</span> <span class="n">bbp</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;::</span><span class="n">pi</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">bbp</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">constexpr</span> <span class="k">static</span> <span class="kt">double</span> <span class="n">pi</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">.</span><span class="n">precision</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">digits10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;pi = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bbp</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;::</span><span class="n">pi</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;pi = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bbp</span><span class="o">&lt;</span><span class="mi">5</span><span class="o">&gt;::</span><span class="n">pi</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;pi = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bbp</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">&gt;::</span><span class="n">pi</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>نتایج:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="nl">pi:</span> <span class="mf">3.14142246642247</span>
</span><span class='line'><span class="nl">pi:</span> <span class="mf">3.14159265322809</span>
</span><span class='line'><span class="nl">pi:</span> <span class="mf">3.14159265358979</span>
</span><span class='line'><span class="nl">pi:</span> <span class="mf">3.14159265358979</span>
</span></code></pre></td></tr></table></div></figure>


<h2>چرا؟</h2>

<p>روش‌های زیادی برای محاسبهٔ عدد پی وجود داره. چرا دقیقاً این روش بهتره؟ مثلاً
روش نیوتون به‌صورت هندسی عدد پی رو به این صورت حساب می‌کنه:</p>

<p>$$\pi=\frac{3}{4}\sqrt{3}+24\int_{0}^{\frac{1}{4}}{\sqrt{x-x^{2}}}\,dx$$</p>

<p>که خوب از نظر عددی محاسبهٔ پیچیده‌تری داره و زمان کامپایل نمیشه درست حسابش کرد.
روش‌های دیگه‌ای هم وجود دارن مثل روش تبدیل همگرایی افزایشی اویلر (OEIS A054387)
که اثبات می‌کنه:</p>

<p>$$\pi=\sum_{n=0}^{\infty}{\frac{\left({n!}^{2}2^{n-1}\right)}{\left(2n+1\right)! }}$$</p>

<p>با بررسی تمام این سری‌ها متوجه میشیم که خطای عددی افزایشی در فرمول BBP از تمام
فرمول‌های پیوسته و سری‌های گسستهٔ دیگه کمتره.</p>

<h2>ثابت‌های دیگر</h2>

<p>عدد پی تنها عدد گنگ مورد استفاده در ریاضیات نیست. با این حال در زمینهٔ محاسبات
علمی به اعداد دیگه مثل عدد e (پایهٔ لگاریتم طبیعی، عدد اویلر) خیلی کم نیاز پیدا
می‌کنیم. (در این مورد خاص دو دلیل داره. یکی این که به‌راحتی قابل تبدیل به
محاسبات مختلط هست و دوم این که تابع استاندارد exp در زبان برنامه‌نویسی سی وجود
داره (:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[مشکل نیم‌فاصله در KDE و روش حل آن]]></title>
    <link href="https://soroush.github.io/blog/kates-zwnj-bug/"/>
    <updated>2017-12-18T00:00:00+03:30</updated>
    <id>https://soroush.github.io/blog/kates-zwnj-bug</id>
    <content type="html"><![CDATA[<p>قبلاً در مورد
<a href="https://soroush.github.io/blog/worst-ever-bug">باگ بسیار بدی</a>
که در کیوت به‌وجود آمده بود و روش حل آن نوشتم. این
باگ باعث میشد امکان نوشتن نویسه‌های کنترلی مثل نیم‌فاصله و تغییر جهت
به‌طور کامل از بین بره. (اگر از نیم‌فاصله استفاده نمی‌کنید و یا نمی‌دونید تغییر
جهت متن چه اهمیتی داره حتماً
<a href="https://soroush.github.io/blog/unicode-bidi/">نویسه‌های کنترلی و جهت‌دهی متون فارسی/انگلیسی</a> رو بخونید)</p>

<p>الآن با گذشت چند ماه باگ مربوطه برطرف شده و با نسخهٔ 5.9.1 منتشر شده.
(تغیرات گریت برای ماژول qtbase
<a href="https://codereview.qt-project.org/#/c/179219/">اینجا</a>
و برای ماژول qtdeclarative
<a href="https://codereview.qt-project.org/#/c/179258/">اینجا</a>
قابل مشاهده هستند)
خوشبختانه برنامه‌های کیوت دیگه مشکل سابق رو ندارند و هم توی ماژول widgets و هم
توی ماژول جدیدتر Qt Quick مشکل به‌طور کامل برطرف شده. خوب حداقل من این‌طور فکر
می‌کردم!</p>

<!--more-->


<p>با به‌روز کردن سیستم به نسخهٔ جدیدتر الان از کیوت نسخهٔ 5.9.1 استفاده می‌کنم که
خوب باگش برطرف شده. اما در کمال تعجب می‌بینم که هنوز نمی‌تونم توی محیط‌های متنی
KDE
مثل kate و یا kwrite فارسی بنویسم! اولش کلی گیج شدم. فکر کردم باگ برطرف نشده.
با مراجعه به صفحهٔ گریت دیدم برطرف شده. ولی خوب kate هنوز نمی‌تونه نیم‌فاصله
بنویسه. بعد فکر کردم شاید از نسخهٔ اصلاح‌شدهٔ کیوت استفاده نمی‌کنن، که دیدم
این‌طوری هم نیست. آخرش با کیوت یه برنامهٔ ویجتی نوشتم و دیدم نیم‌فاصله به راحتی
درج میشه. بعد به این نتیجه رسیدم که خوب حتماً مشکل توی ماژول Qt Quick اصلاح
نشده، یه تست دیگه با QML نوشتم و دیدم اونجا هم مشکل نداره! خوب پس چرا kate
نمی‌تونه نیم‌فاصله بنویسه؟</p>

<p>بعد از مطالعهٔ ده‌ها پکیج مربوط به KDE (از کتابخانه‌های libkf5 تا خود سورس
kate
) بالأخره مشکل رو پیدا کردم. دقیقا مثل کیوت یک فیلتر برای حذف نویسه‌های غیر
قابل چاپ از ورودی اضافه شده. خوب وقتی کیوت این ویژگی رو داشت چرا توسعه‌دهندهٔ
KDE
لازم دیده اضافه‌ش کنه؟ این رو باید از خود توسعه‌دهنده‌ها پرسید. بهرحال
نویسندهٔ این سورس فرض کرده هیچ نویسهٔ یونیکدی که نمایش تصویری نداشته باشه
شایستگی درج در متن رو نداره. مگر دو تا استثنا: tab و space. خوب من فقط
نیم‌فاصله‌ها و کاراکترهای کنترل جهت رو به این استثنا اضافه کردم. با این پچ مشکل
من در KDE به‌طور کامل حل شد. اما مطمئن هستم کسانی که توی کشورهای دیگه زندگی
می‌کنند و نیاز به درج کاراکترهای خاص‌تری رو دارند همچنان مشکلاتی خواهند داشت.
کار بهتر می‌تونه حذف کامل این فیلتر و پیاده‌سازی منطق مربوطه به شکل دیگه باشه.
چند ماه آینده شاید بتونم وقتی پیدا کنم که این کار رو انجام بدم. فعلاً اما این
پچ کار رو راه می‌اندازه. مراحل قدم‌به‌قدم و پچ نهایی در ادامه نوشته شده.</p>

<h2>رفع باگ</h2>

<p>محیط کاری من KDE (نسخهٔ اوبونتو 17.10) هست. اگر از توزیع‌های دیگهٔ مبتنی‌بر
دبیان یا خود دبیان استفاده می‌کنید مراحل کار تقریباً مشابه خواهد بود.</p>

<p>اول باید پکیج‌های زیر رو نصب کنید. این‌ها اسکریپت‌های کمکی برای ایجاد و تغییر
محتوای پکیج‌های deb هستند.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt install quilt devscripts
</span></code></pre></td></tr></table></div></figure>


<p>تعداد زیادی از پکیج‌های توسعهٔ KDE و کیوت رو هم نیاز خواهید داشت. من لیست
معقولی از این پکیج‌ها رو پایین آوردم، اما خوب کامپایلر و باقی پیش‌نیازهای بدیهی
رو فرض کردم که از قبل نصب کرده‌اید:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt install debhelper extra-cmake-modules libeditorconfig-dev
</span><span class='line'>libgit2-dev libkf5archive-dev libkf5config-dev libkf5guiaddons-dev
</span><span class='line'>libkf5i18n-dev libkf5iconthemes-dev libkf5kio-dev libkf5parts-dev
</span><span class='line'>libkf5sonnet-dev libkf5syntaxhighlighting-dev libqt5xmlpatterns5-dev
</span><span class='line'>pkg-kde-tools qtdeclarative5-dev qtscript5-dev
</span></code></pre></td></tr></table></div></figure>


<p>در مرحلهٔ بعد شما باید پکیج سورس کتابخانه‌ای رو دانلود کنید که شامل ادیتورهای
متنی فریم‌ورک KDE هست. برای این کار:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt <span class="nb">source </span>ktexteditor
</span></code></pre></td></tr></table></div></figure>


<p>بعد محیط رو برای ایجاد تغییرات (مثل قبل) آماده می‌کنیم:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>ktexteditor-5.38.0/
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">QUILT_PATCHES</span><span class="o">=</span>debian/patches
</span><span class='line'><span class="nv">$ </span>quilt push -a
</span><span class='line'><span class="nv">$ </span>quilt add ./src/document/katedocument.cpp
</span></code></pre></td></tr></table></div></figure>


<p>بعد فایل <code>‪./src/document/katedocument.cpp‬</code> رو تغییر میدیم و فیلترهای مربوطه
رو اضافه می‌کنیم. و یا می‌تونید از پچی که پایین نوشتم استفاده کنید.</p>

<p>در نهایت (بازم مثل قبل) کامپایل و نصب پکیج رو انجام میدیم:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>quilt refresh
</span><span class='line'><span class="nv">$ </span>quilt pop -a
</span><span class='line'><span class="nv">$ DEB_BUILD_OPTIONS</span><span class="o">=</span>nocheck debuild -us -uc -b -j10
</span><span class='line'><span class="nv">$ </span>sudo debi
</span></code></pre></td></tr></table></div></figure>


<p>در ادامه شما می‌تونید از تایپ فارسی در محیط متنی KDE و هر برنامه‌ای که از اون
استفاده می‌کنه (مثل kate) لذت ببرید (:</p>

<p><img class="center" src="https://soroush.github.io/images/posts/kate-bugfix/kate.png" title="باگ برطرف شده" ></p>

<h2>وصله</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">----    2017-12-18 16:53:03.435719378 +0330</span>
</span><span class='line'><span class="gi">+++ </span>
</span><span class='line'>/home/soroush/workspace/kate-bugfix/ktexteditor-5.38.0/src/document/katedocument
</span><span class='line'>.cpp  2017-12-18 16:50:09.000000000 +0330
</span><span class='line'><span class="gu">@@ -2904,8 +2904,7 @@</span>
</span><span class='line'>     const auto realUcs4Chars = realChars.toUcs4();
</span><span class='line'>     QVector&lt;uint&gt; ucs4Chars;
</span><span class='line'>     Q_FOREACH (auto c, realUcs4Chars)
</span><span class='line'><span class="gd">-        if (QChar::isPrint(c) || c == QChar::fromLatin1(&#39;\t&#39;) || c == </span>
</span><span class='line'>QChar::fromLatin1(&#39;\n&#39;) || c == QChar::fromLatin1(&#39;\r&#39;)
</span><span class='line'><span class="gd">-            || (0x2000 &lt;= c &amp;&amp; c &lt;= 0x200F) || (0x2028 &lt;= c &amp;&amp; c &lt;= 0x202F) ) {</span>
</span><span class='line'><span class="gi">+        if (QChar::isPrint(c) || c == QChar::fromLatin1(&#39;\t&#39;) || c == </span>
</span><span class='line'>QChar::fromLatin1(&#39;\n&#39;) || c == QChar::fromLatin1(&#39;\r&#39;)) {
</span><span class='line'>             ucs4Chars.append(c);
</span><span class='line'>         }
</span></code></pre></td></tr></table></div></figure>


<h2>مشکلات باقی‌مانده</h2>

<p>چند تا مشکل کوچیک هنوز هست که باید برطرف بشه. یکی این که تمام نویسه‌های فیلتر
شده، شمرده نخواهند شد. یعنی اگر شما مثلا بنویسید «ل» بعد یک نیم‌فاصله بزنید، و
بنویسید «م»، نیم‌فاصله اون وسط جا می‌گیره. اما اگر یکی به عقب برگردید و
Backspace
بزنید، هم نیم‌فاصله و هم «ل» پاک میشن. خیلی باگ بدی نیست. این هفته سعی خواهم
کرد این رو هم درست کنم.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[برنامه‌نویسی شبکه در ویندوز/لینوکس: libcpnet]]></title>
    <link href="https://soroush.github.io/blog/libcpnet/"/>
    <updated>2017-09-11T00:00:00+04:30</updated>
    <id>https://soroush.github.io/blog/libcpnet</id>
    <content type="html"><![CDATA[<p>کارفرمای کاری که الان دارم انجام میدم اصرار داره که برنامه‌ش علاوه‌بر لینوکس روی
ویندوز هم به‌خوبی اجرا بشه. مدیر من کاملاً این محدودیت رو پذیرفته و به کارفرما
گفته که با سخت‌افزاری که مشخصاتش رو اعلام می‌کنیم و با مشخصات کارکردی که اعلام
می‌کنیم، روی ویندوز هم می‌تونید برنامه رو اجرا کنید. خوب این تصمیم مشکلات بسیار
بزرگی برای برنامه‌نویس به‌وجود میاره. ازجمله برنامه‌نویسی شبکه&hellip; این پست به
بررسی این مشکلات و ارائهٔ یک راه حل خوب خواهد پرداخت (: اگر قصد دارید کدی
بنویسید که هم روی ویندوز و هم روی سیستم‌عامل‌های واقعی بتونه از شبکه استفاده
کنه
حتماً ادامهٔ مطلب رو بخونید.</p>

<!--more-->


<p>در لینوکس API ساده و بسیار کاربردی برای برنامه‌نویسی شبکه وجود داره که تقریباً
تمام این API استاندارد شده. توابع زبان سی که خیلی ساده کارهایی رو با فلسفهٔ
یونیکس (≈ هرچیزی یک فایل هست برای نوشتن و خواندن) انجام میده. به راحتی و با
استفاده از این API سطح پایین میشه برنامه‌های شبکه با کارایی بالا نوشت.</p>

<p>مشکل از جایی شروع میشه که این برنامه‌ها بخوان سمت ویندوز برن. متأسفانه
سیستم‌عامل ویندوز از نظر طراحی هیچ استاندارد خاصی رو رعایت نکرده و تنها
<a href="https://brianreiter.org/2010/08/24/the-sad-history-of-the-microsoft-posix%20-subsystem/">قسمت‌هایی از مشخصات POSIX</a>
رو به‌صورت دست و پا شکسته و ناقص پیاده‌سازی کرده. از
طرف دیگه API خوبی هم  برای کار کردن با سوکت‌ها نداره. نصف توابعی که فراهم شده
POSIX
هستند و نصف دیگه کاملاً
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms741394%%2028v=vs.85%29.aspx">من‌درآوردی</a>.</p>

<p>معمولاً برنامه‌های بزرگ برای حل این مشکلات از کتابخانه‌هایی که پیاده‌‌سازی‌های
چندسکویی (cross-platform) فراهم کردند استفاده می‌کنند. معروف‌ترین این
پیاده‌سازی‌ها
<a href="https://pocoproject.org">poco</a>,
<a href="www.cs.wustl.edu/~schmidt/ACE.html">ACE</a>,
<a href="https://think-async.com/">asio</a> و
<a href="http://zeromq.org/">ØMQ</a>
هستند. مشکلی که استفاده از این کتابخانه‌ها داره اینه که:</p>

<ul>
<li>خیلی پیچیده و بزرگ هستند. (بعضی‌ها حتا چندین مگابایت پیش‌نیازی اضافه
می‌کنند. مثل کیوت)</li>
<li>برای کارهای خاص و الگوهای پیچیده ساخته شده‌اند. (مثلا asio برای
معماری‌های async و ZMQ برای الگوهای ارتباطی خاص)</li>
</ul>


<p> به همین دلیل جای خالی یک کتابخانهٔ <strong>ساده</strong> و <strong>بسیار سبک</strong> که با کمترین
هزینه؛ برای ویندوز و لینوکس رابط برنامه‌نویسی <strong>سطح سوکت</strong> فراهم کنه احساس
می‌شد. متأسفانه من همچین کدی پیدا نکردم. و شروع کردم به نوشتن یک کتابخانهٔ آزاد
و خیلی خیلی ساده به زبان سی که امکان برنامه‌نویسی شبکه در سطح سوکت رو برای هر
دو سیستم‌عامل فراهم می‌کنه. نتیجه چیزی شد که خودم خیلی ازش راضی بودم و تصمیم
گرفتم منتشرش کنم.</p>

<p>این کتابخانه از اینجا قابل دسترسی هست: <a href="https://github.com/soroush/libcpnet">https://github.com/soroush/libcpnet</a></p>

<h2>ویژگی‌ها</h2>

<ul>
<li>API سطح سوکت هست. هیچ پیش‌فرضی در مورد الگوی برنامه‌نویسی یا پروتکل‌های سطح بالاتر از انتقال گرفته نشده؛</li>
<li>سوکت‌های UDP و TCP تقریباً به‌طور کامل پشتیبانی میشن؛</li>
<li>کد استاندارد سی هست (درواقع C99) که البته با C11 هم کامپایل میشه؛</li>
<li>کد روی سیزده پلتفرم مختلف تست شده. (ویژوال استودیو ۲۰۱۷ و ۲۰۱۵ &ndash; release و debug &ndash; استاتیک و داینامیک + نسخه‌های 4.7 4.8 4.9 5.4 و 6 از gcc)؛</li>
</ul>


<h2>محدودیت‌ها</h2>

<ul>
<li>در حال حاضر فقط سوکت‌های datagram و stream (در واقع UDP و TCP) رو پیاده‌سازی
کردم. این‌ها پرکاربردتر از بقیهٔ انواع سوکت‌ها هستند. البته سوکت‌های انواع دیگه رو هم به
مرور اضافه می‌کنم؛</li>
<li>این API کامل نیست. یعنی تمام توابع رو (مخصوصاً توابعی رو که هم توی لینوکس و
هم توی ویندوز یکسان هستند) پوشش نمیده. دلیلش واضحه: دلیلی ندیدم پیاده‌سازی کنم.</li>
</ul>


<p>با وجود این محدودیت‌ها کتابخانه کاملاً کاربردی و قابل استفاده هست و مشکلات زیادی رو حل می‌کنه.</p>

<h2>کد</h2>

<p>هیچ چیز بهتر از کد نمی‌تونه توضیح بده (: کد سمت کلاینت برای اتصال از نوع TCP یه
همچین چیزی میشه:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Client-side sample code */</span>
</span><span class='line'><span class="cm">/* Initialize networking API (Only needed in Windows) */</span>
</span><span class='line'><span class="n">net_init</span><span class="p">();</span>
</span><span class='line'><span class="cm">/* Start a client */</span>
</span><span class='line'><span class="n">socket_t</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">net_socket</span><span class="p">(</span><span class="n">SOCK_STREAM</span><span class="p">);</span>
</span><span class='line'><span class="cm">/* Connect to port 50001 */</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">net_connect</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">50001</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Unable to connect: %s&quot;</span><span class="p">,</span> <span class="n">net_last_error</span><span class="p">();</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'><span class="cm">/* Write to socket */</span>
</span><span class='line'><span class="n">ssizet</span> <span class="n">io_size</span> <span class="o">=</span> <span class="n">net_write</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="mi">1024</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">io_size</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Unable to write: %s&quot;</span><span class="p">,</span> <span class="n">net_last_error</span><span class="p">();</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">io_size</span> <span class="o">=</span> <span class="n">net_read</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="mi">1024</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">read_size</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Unable to read: %s&quot;</span><span class="p">,</span> <span class="n">net_last_error</span><span class="p">();</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* ... */</span>
</span><span class='line'><span class="cm">/* Cleanup (Only needed in Windows) */</span>
</span><span class='line'><span class="n">net_clean</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>و کد سمت سرور برای باز کردن یک پورت و جواب دادن به اتصالات مختلف:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Initialize networking API (if any needed) */</span>
</span><span class='line'><span class="n">net_init</span><span class="p">();</span>
</span><span class='line'><span class="cm">/* Start a server */</span>
</span><span class='line'><span class="n">socket_t</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">net_socket</span><span class="p">(</span><span class="n">SOCK_STREAM</span><span class="p">);</span>
</span><span class='line'><span class="cm">/* Bind on port 50001 */</span>
</span><span class='line'><span class="kt">uint16_t</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">50001</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">net_bind</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">port</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Unable to bind: %s&quot;</span><span class="p">,</span> <span class="n">net_last_error</span><span class="p">());</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* Listen for incomming connections (backlog=10) */</span>
</span><span class='line'><span class="n">net_listen</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="cm">/* Accept clients */</span>
</span><span class='line'><span class="kt">char</span> <span class="n">address</span><span class="p">[</span><span class="mi">46</span><span class="p">];</span>
</span><span class='line'><span class="n">socket_t</span> <span class="n">client</span> <span class="o">=</span> <span class="n">net_accept</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">port</span><span class="p">);</span>
</span><span class='line'><span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Client connected. Remote Address:`%s&#39; Assigned port number: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">r</span> <span class="o">=</span> <span class="n">net_read</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="mi">1024</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Unable to read from socket: &quot;</span><span class="p">,</span> <span class="n">net_last_error</span><span class="p">());</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Remote client stopped.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">net_close</span><span class="p">(</span><span class="n">client</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">w</span> <span class="o">=</span> <span class="n">net_write</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">w</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Unable to write to socket: &quot;</span><span class="p">,</span> <span class="n">net_last_error</span><span class="p">());</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>چند تا نکته:</p>

<ul>
<li>همهٔ توابع با ‪<code>net_</code>‬ شروع میشن.</li>
<li>روی لینوکس لازم نیست ‪<code>net_init()</code>‬ و ‪<code>net_clean()</code>‬ رو بنویسید، اما ضرری هم نداره (هیچ کاری نمی‌کنه)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[بدترین باگ کیوت!]]></title>
    <link href="https://soroush.github.io/blog/worst-ever-bug/"/>
    <updated>2017-05-09T00:00:00+04:30</updated>
    <id>https://soroush.github.io/blog/worst-ever-bug</id>
    <content type="html"><![CDATA[<p>کیوت به‌نظر من بهترین فریم‌ورک سی‌پلاس‌پلاس هست. یک کتابخانهٔ خیلی بزرگ با
امکانات بسیار عالی و خوب که محیط کاری KDE به‌طور کامل برپایهٔ اون ساخته شده.
اما از نسخهٔ 5.3 (ظاهراً) یک باگی به‌وجود آمده که زندگی رو برای ما خیلی سخت
کرده: عدم امکان وارد کردن نویسه‌های کنترلی و نیم‌فاصله‌های چسبان و غیرچسبان!
(قبلاً در مورد مورد
<a href="https://soroush.github.io/blog/unicode-bidi/">نویسه‌های کنترلی و جهت‌دهی متون فارسی/انگلیسی</a>
نوشتم.) حوزهٔ تأثیر این باگ به قدری بزرگ و
گسترده است که کار با محیط KDE رو برای ما غیرممکن کرده. تصور کنید که تقریباً هیچ
جایی توی سیستم‌عامل و برنامه‌های کاربردی محیط دسکتاپ نتونید نویسه‌های کنترلی و
فاصله‌ها رو تایپ کنید! توی این نوشته قصد دارم دلایل این باگ و روش برطرف کردنش و
همچنین روش دور زدن اون رو
توضیح بدم (: خوشبختانه روش فیکس خیلی ساده‌ست. و البته جای نگرانی نیست: نسخه‌های
فیکس با کیوت 5.8.1 (اگر ریلیز بشه) و یا 5.9.0 (در هر صورت) منتشر میشن. منتها
کسایی که نمی‌خوان تا اواسط 2018 صبر کنن که اون نسخه‌ها برای دبیان و اوبونتو
بیاد، خودشون می‌تونن با این روشی که توضیح میدم پچ کنن (:</p>

<!--more-->


<h2>شروع ماجرا</h2>

<p>همه‌چیز توی کیوت به خوبی و خوشی پیش می‌رفت. نسخهٔ 5 تازه منشتر شده بود و چند تا
هم نسخهٔ minor خورده بود و همهٔ باگ‌های اساسی داشتن به مرور برطرف می‌شدن که
<a href="https://bugreports.qt.io/browse/QTBUG-35734">QTBUG-35734</a>
اتفاق افتاد. توی نسخهٔ 5.2 یک نفر گزارش کرد که کلیدهای کنترل و شیفت موقع تایپ
نویسه‌های نشانه‌گذاری آلمانی (مثل دونقطهٔ بالایی Ü) درست کار نمی‌کنن. فیکس
مربوطه خیلی ساده بود: حذف تمام نویسه‌های غیرقابل نمایش (چیزهایی که پرینت نمیشن)
که با شیفت یا کنترل و شیفت وارد میشن از ورودی‌های کیوت (تمام ورودی‌ها سابسیستم
ویجت‌ها). این
فیکس توی نسخهٔ 5.4 منتشر شد و الان که 5.8 رو داریم هنوز پابرجاست. نتیجه این که
محدودهٔ گسترده‌ای از نویسه‌های کنترلی جهت و نیم‌فاصله رو نمی‌تونیم با کلیدها
وارد کنیم. (البته می‌تونیم کپی کنیم از جای دیگه، ولی خوب به درد کی می‌خوره؟)</p>

<h2>برطرف شدن مشکل</h2>

<p>مشکل مربوطه توسط پنج نفر (که یکیش خودم باشم) به‌طور مستقل گزارش شده. اولین
گزارش
باگ به تاریخ ۲۹ مهر ۱۳۹۳ اینجا بود:
<a href="https://bugreports.qt.io/browse/QTBUG-42074">QTBUG-42074</a>
 و چندین مورد هم مثل
<a href="https://bugreports.qt.io/browse/QTBUG-55608">QTBUG-55608</a>
و
<a href="https://bugreports.qt.io/browse/QTBUG-57302">QTBUG-57302</a>
و
<a href="https://bugreports.qt.io/browse/QTBUG-57003">QTBUG-57003</a>
و
<a href="https://bugreports.qt.io/browse/QTBUG-58364">QTBUG-58364</a>
بعدش گزارش شدن. ولی فیکس مربوطه میرسه به تاریخ ۲۸ دی ۱۳۹۵ ! یعنی ما دو سال
آزگار باید منتظر فیکس شدن این معضل می‌موندیم. منشأ این مشکل ضعف جامعهٔ کاربری
توسعه‌دهنده‌های ایرانی هست. وقتی سطح مشارکت ما این‌قدر پایین باشه و صرفاً دنبال
راه‌کارهای سودآور بدون صرف هیچ زمان و هزینه‌ای باشیم؛ اونوقت وضعیت‌مون میشه
همین. تازه مشکل با فیکس شدن باگ هم حل نمیشه! ما معمولاً از توزیع‌های مخازن
استفاده می‌کنیم که خیلی دیر به‌روز میشن. خیلی دیر یعنی این که نسخهٔ فعلی کیوت
توی مخازن اوبونتو برابر 5.6.1 هست، و نسخهٔ تصمیم‌گیری شده برای انتشار بعدی (شش
ماه بعد) 5.7.1 هست. یعنی حداقل باید برای رفع این مشکل یک سال دیگه (اون هم با
اما و اگر) صبر کنیم. کاربران دبیان اما شرایط بدتری دارند. کاربران ردهت خیلی
بدتر
از حتی دبیان!</p>

<h2>راه‌حل‌های غیررسمی</h2>

<p>تلگرام یک پچ غیررسمی روی کدهای کیوت منتشر کرد که به لطف این پچ می‌تونیم از
نویسه‌های نیم‌فاصله و نیم‌فاصلهٔ چسبان توی تلگرام استفاده کنیم. اما هنوز
نمی‌تونیم از تغییردهنده‌های جهت استفاده کنیم&hellip;</p>

<p>از طرفی هیچ توزیع لینوکسی هیچ وصله‌ای رو ارائه نکرده برای این مشکل. بنابراین
هرکسی با هر نسخه‌ای از کیوت که نصب داره، باید پچ خودش رو بنویسه؛ که از طرفی با
پچ‌های خود توزیع روی کیوت هم تداخل پیدا نکنه. خوب این کار رو من کردم و نتیجه
گرفتم. البته به‌صورت نصفه نیمه: فقط ویجت‌ها درست شدن. کیوت کوییک (مخصوصاً kate
که ظاهراً به همراه KF5 مهاجرت کرده به رابط کاربری جدید کیوت) مشکلش پابرجاست.
به‌زودی برای اون هم راه‌حلی پیدا می‌کنم.</p>

<p>راه حل من مبتنی بر اوبونتو هست که با کمترین تغییرات برای دبیان هم قابل اعمال
هست. روال مشابهی برای توزیع‌های دیگه باید انجام بشه.</p>

<p>برای حل این مشکل ما باید کتابخانهٔ Qt Core رو پچ کنیم. پچ کردن یا وصله زدن به
فرایند ایجاد تغییرات جزئی توی سورس اصلی یک بستهٔ نرم‌افزاری گفته میشه. ما این
کار رو کاملاً در چهارچوب طراحی و استانداردهای مخازن اوبونتو (و دبیان) انجام
خواهیم داد. برای این کار اول باید بسته‌های سورس کتابخانهٔ مورد نظر رو دانلود
کنیم:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>‌‌apt <span class="nb">source </span>libqt5core5a
</span></code></pre></td></tr></table></div></figure>


<p>این دستور بستهٔ نرم‌افزار حامل سورس کتابخانهٔ Qt Core رو به همراه تمام وصله‌های
مربوط به اوبونتو برای ما دانلود خواهد کرد. در مجموع چیزی حدود پنجاه مگابایت.
اگر به خروجی دقت کنید می‌بینید که آدرس رپوزیتوی گیت هم داده شده که بعداً
می‌تونیم از اون برای ارسال وصله برای ریلیز توی مخازن اوبونتو استفاده کنیم:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>Reading package lists... Done
</span><span class='line'>Picking <span class="s1">&#39;qtbase-opensource-src&#39;</span> as <span class="nb">source </span>package instead of <span class="s1">&#39;libqt5core5a&#39;</span>
</span><span class='line'>NOTICE: <span class="s1">&#39;qtbase-opensource-src&#39;</span> packaging is maintained in the <span class="s1">&#39;Git&#39;</span> version
</span><span class='line'>control system at:
</span><span class='line'>https://anonscm.debian.org/git/pkg-kde/qt/qtbase.git
</span><span class='line'>Please use:
</span><span class='line'>git clone https://anonscm.debian.org/git/pkg-kde/qt/qtbase.git
</span><span class='line'>to retrieve the latest <span class="o">(</span>possibly unreleased<span class="o">)</span> updates to the package.
</span><span class='line'>Need to get 47.5 MB of <span class="nb">source </span>archives.
</span><span class='line'>Get:1 http://gb.archive.ubuntu.com/ubuntu xenial-updates/main/qtbase-opensource-src 5.5.1+dfsg-16ubuntu7.2 <span class="o">(</span>dsc<span class="o">)</span> <span class="o">[</span>5,096 B<span class="o">]</span>
</span><span class='line'>Get:2 http://gb.archive.ubuntu.com/ubuntu xenial-updates/main/qtbase-opensource-src 5.5.1+dfsg-16ubuntu7.2 <span class="o">(</span>tar<span class="o">)</span> <span class="o">[</span>47.2 MB<span class="o">]</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>خوب حالا سورس اصلی رو (بدون اعمال وصله‌ها) توی مسیر مربوطه داریم. الان باید
وصلهٔ خودمون رو اعمال کنیم. خوب من می‌دونم که مشکل مربوطه توی فایلی به اسم
<code>qwidgettextcontrol.cpp</code>
در مسیر
<code>src/widgets/widgets/</code>
هست. خوب به اون مسیر میرم و قسمت‌هایی که میخوام رو تغییر میدم. روش انجام این
تغییر مهم هست و باید به شکل اصولی انجام بشه تا قابل اشتراک گذاری با دیگران باشه:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>qtbase-opensource-src-5.5.1+dfsg/
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">QUILT_PATCHES</span><span class="o">=</span>debian/patches
</span><span class='line'><span class="nv">$ </span>quilt push -a
</span><span class='line'>File series fully applied, ends at patch debian/patches/fix-duplicate-qnam-finished.patch
</span><span class='line'><span class="nv">$ </span>quilt new fix-non-printable-filters-for-persian-keyboard
</span><span class='line'>Patch debian/patches/fix-non-printable-filters-for-persian-keyboard is now on top
</span><span class='line'><span class="nv">$ </span>quilt add src/widgets/widgets/qwidgettextcontrol.cpp
</span><span class='line'>File src/widgets/widgets/qwidgettextcontrol.cpp added to patch debian/patches/fix-non-printable-filters-for-persian-keyboard
</span><span class='line'><span class="nv">$ </span>quilt add src/widgets/widgets/qwidgetlinecontrol.cpp
</span><span class='line'>File src/widgets/widgets/qwidgetlinecontrol.cpp added to patch debian/patches/fix-non-printable-filters-for-persian-keyboard
</span></code></pre></td></tr></table></div></figure>


<p>با این اجرای دستورات؛ فایل‌ها رو برای <strong>تعقیب تغییرات</strong> نشان‌گذاری می‌کنیم.
تعقیب تغییرات یعنی این که به سیستم میگیم که: حواست باشه کدوم قسمت از فایل رو به
چه شکلی تغییر میدم و در نهایت وقتی ازت پرسیدم چه کاری انجام شد، در فرمت
ازپیش‌تعریف‌‌شدهٔ patch، به من بگو که دقیقاً چه کارهایی انجام شد.</p>

<p>خوب، بعد از اصلاح فایل‌ها (اضافه کردن چند خط کد مربوط به شرط عدم پذیرش نویسه‌ها
که بعداً در موردش توضیح میدم) می‌رسیم به مرحله‌ای که می‌خواهیم وصلهٔ مربوطه رو
تشکیل بدیم و کدها رو کامپایل کنیم. برای درست کردن وصله باید دستورات زیر رو وارد
کنیم. با اجرای دستور اول وصله ساخته میشه و با اجرای دستور دوم تغییراتی که برای
ساخت وصله انجام داده بودیم، به حالت اول برگردانده میشه.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>quilt refresh
</span><span class='line'><span class="nv">$ </span>quilt pop -a
</span></code></pre></td></tr></table></div></figure>


<p>خوب حالا طبق استاندارد باید یک واردهٔ جدید به فایل ChangeLog اضافه کنیم که
توضیحات مختصری در مورد وصله‌ای که ارائه دادیم رو داشته باشه. برای این کار
می‌تونیم به شکل دستی فایل مورد نظر رو ویرایش کنیم و یا از دستور <code>dch -i</code>
استفاده کنیم که کار رو برای ما راحت‌تر می‌کنه. این دستور از ما می‌پرسه ادیتور
موردعلاقه‌مون چیه و بعد با استفاده از اون ادیتور یک واردهٔ استاندارد به ابتدای
فایل ChangeLog اضافه می‌کنه. محتویات فایل ChangeLog در نهایت به‌صورت زیر خواهد
بود. (دقت کنید که نسخهٔ پکیج‌های ساخته شده دقیقاً یکی بیشتر از نسخهٔ پکیج اصلی)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>qtbase-opensource-src (5.5.1+dfsg-16ubuntu7.3) UNRELEASED; urgency=medium
</span><span class='line'>
</span><span class='line'>  * Add a temporary workaround for QTBUG-42074
</span><span class='line'>
</span><span class='line'> -- Soroush Rabiei &lt;soroush@ametisco.ir&gt;  Tue, 09 May 2017 20:23:08 +0430
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>بعد از این کار آمادهٔ کامپایل و نصب بسته هستیم. دستورات زیر این کار رو برای ما
انجام میدن:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ DEB_BUILD_OPTIONS</span><span class="o">=</span>nocheck debuild -us -uc -b -j10
</span></code></pre></td></tr></table></div></figure>


<p>من اینجا تست‌های اتوماتیک رو با متغیر محیطی <code>DEB_BUILD_OPTIONS</code> غیرفعال کردم
چون نمی‌خوام بعد از کامپایل پکیج‌ها کلی وقت صرف تست اون‌ها بکنم. روال کامپایل
رو هم ده‌هسته‌ای تعریف کردم (قانون دو+تعداد هسته‌های پردازنده). بعد از حدود ده
دقیقه روی ماشین من (i7-6700) پکیج‌ها آمادهٔ نصب هستند و در دایرکتوری بالاتر
به‌صورت مجموعه‌ای از فایل‌های  .deb قابل دسترس هستند. البته این فایل‌ها توی
دایرکتوری بالاتر ایجاد میشن نه کنار سورس‌ها. من این‌ها رو میذارم توی یک
رپوزیتوری شخصی که از پکیج‌هام درست کردم که بعداً هم بتونم نصبشون کنم. البته
می‌تونم مستقیماً با این دستور پکیج‌های ساخته شده رو نصب کنم:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> .. <span class="c"># برای رفتن به دایرکتوری بالاتر</span>
</span><span class='line'><span class="nv">$ </span>sudo debi <span class="c"># برای نصب پکیج‌های تولید شده</span>
</span></code></pre></td></tr></table></div></figure>


<h2>نتایج</h2>

<p>خوب حالا با خیال راحت توی برنامه‌های ویجتی کیوت می‌تونم از نیم‌فاصله و کاراکترهای کنترلی
استفاده کنم:</p>

<p><img class="center" src="https://soroush.github.io/images/posts/worst-ever-bug/QTBUG-42074.png" title="باگ برطرف شده" ></p>

<h2>پی‌نوشت: وصله‌ها</h2>

<p>خوب وصله‌ای که من برای ویجت‌ها به‌کار بردم این‌طور عمل می‌کنه: یک لیست سفید از
نویسه‌هایی که نباید توی شرط مربوط به فیکس 35724 فیلتر بشن رو اضافه می‌کنم و هر
سری که چیزی توی متن نوشته شد بررسی میشه که اگر شرط 35724 صدق کنه <strong>یا</strong> کاراکتر
توی لیست سفید باشه؛ در این‌صورت اون رو می‌نویسه. وصلهٔ مربوطه این هست:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">Index: </span>
</span><span class='line'>qtbase-opensource-src-5.5.1+dfsg/src/widgets/widgets/qwidgetlinecontrol.cpp
</span><span class='line'><span class="gh">===================================================================</span>
</span><span class='line'><span class="gd">--- </span>
</span><span class='line'>qtbase-opensource-src-5.5.1+dfsg.orig/src/widgets/widgets/qwidgetlinecontrol.cpp
</span><span class='line'><span class="gi">+++ qtbase-opensource-src-5.5.1+dfsg/src/widgets/widgets/qwidgetlinecontrol.cpp </span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="gu">@@ -1884,7 +1884,11 @@ void QWidgetLineControl::processKeyEvent                 </span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>         &amp;&amp; event-&gt;modifiers() != Qt::ControlModifier
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>         &amp;&amp; event-&gt;modifiers() != (Qt::ControlModifier | Qt::ShiftModifier)) {
</span><span class='line'>         QString t = event-&gt;text();
</span><span class='line'><span class="gd">-        if (!t.isEmpty() &amp;&amp; t.at(0).isPrint()) {</span>
</span><span class='line'><span class="gi">+        ushort code = 0;</span>
</span><span class='line'><span class="gi">+        if(!t.isEmpty())</span>
</span><span class='line'><span class="gi">+            code = t.at(0).unicode();</span>
</span><span class='line'><span class="gi">+        if (!t.isEmpty() &amp;&amp;</span>
</span><span class='line'><span class="gi">+            (t.at(0).isPrint() || (0x2000 &lt;= code &amp;&amp; code &lt;= 0x200F) || (0x2028 &lt;= code &amp;&amp; code &lt;= 0x202F))) {</span>
</span><span class='line'>             insert(t);
</span><span class='line'> #ifndef QT_NO_COMPLETER
</span><span class='line'>             complete(event-&gt;key());
</span><span class='line'><span class="gh">Index: </span>
</span><span class='line'>qtbase-opensource-src-5.5.1+dfsg/src/widgets/widgets/qwidgettextcontrol.cpp
</span><span class='line'><span class="gh">===================================================================</span>
</span><span class='line'><span class="gd">--- </span>
</span><span class='line'>qtbase-opensource-src-5.5.1+dfsg.orig/src/widgets/widgets/qwidgettextcontrol.cpp
</span><span class='line'><span class="gi">+++ qtbase-opensource-src-5.5.1+dfsg/src/widgets/widgets/qwidgettextcontrol.cpp</span>
</span><span class='line'><span class="gu">@@ -1342,13 +1342,19 @@ void QWidgetTextControlPrivate::keyPress</span>
</span><span class='line'> process:
</span><span class='line'>     {
</span><span class='line'>         // QTBUG-35734: ignore Ctrl/Ctrl+Shift; accept only AltGr (Alt+Ctrl) on German keyboards
</span><span class='line'><span class="gd">-        if (e-&gt;modifiers() == Qt::ControlModifier</span>
</span><span class='line'><span class="gi">+        /* if (e-&gt;modifiers() == Qt::ControlModifier</span>
</span><span class='line'>             || e-&gt;modifiers() == (Qt::ShiftModifier | Qt::ControlModifier)) {
</span><span class='line'>             e-&gt;ignore();
</span><span class='line'>             return;
</span><span class='line'>         }
</span><span class='line'><span class="gi">+        */</span>
</span><span class='line'>         QString text = e-&gt;text();
</span><span class='line'><span class="gd">-        if (!text.isEmpty() &amp;&amp; (text.at(0).isPrint() || text.at(0) == </span>
</span><span class='line'>QLatin1Char(&#39;\t&#39;))) {
</span><span class='line'><span class="gi">+        ushort code = 0;</span>
</span><span class='line'><span class="gi">+        if(!text.isEmpty())</span>
</span><span class='line'><span class="gi">+            code = text.at(0).unicode();</span>
</span><span class='line'><span class="gi">+        if (!text.isEmpty()</span>
</span><span class='line'><span class="gi">+                &amp;&amp; (text.at(0).isPrint() || text.at(0) == QLatin1Char(&#39;\t&#39;)</span>
</span><span class='line'><span class="gi">+                    || (0x2000 &lt;= code &amp;&amp; code &lt;= 0x200F) || (0x2028 &lt;= code &amp;&amp; code &lt;= 0x202F))) {</span>
</span><span class='line'>             if (overwriteMode // no need to call deleteChar() if we have a selection, insertText
</span><span class='line'>                 // does it already
</span></code></pre></td></tr></table></div></figure>


<h2>پی‌نوشت ۲: کارهای باقی‌مانده</h2>

<p>با اِعمال این وصله، باگ مربوطه در زمینهٔ ویجت‌ها برطرف شده؛ اما باگ مشابهی هنوز
توی Qt Quick وجود داره. این باگ باعث میشه اون دسته از برنامه‌های KDE که به سیستم
جدید KF5 مهاجرت کردن هنوز این مشکل رو داشته باشن. هنوز نمی‌دونم فیکسش چطور
هست. بهرحال اگر پیداش کنم، به‌همراه وصلهٔ ویجت‌ها منتشرش می‌کنم. اگر به نسخهٔ رپوزیتوری
نرسه (که با توجه به سنگین بودن کیوت امکان پذیرشش کم هست) این فیکس‌ها رو داخل یک
PPA
منتشر می‌کنم.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[این بورد لعنتی]]></title>
    <link href="https://soroush.github.io/blog/damn-board/"/>
    <updated>2016-01-08T00:00:00+03:30</updated>
    <id>https://soroush.github.io/blog/damn-board</id>
    <content type="html"><![CDATA[<p>مدتی‌یه که برای انجام یه پروژهٔ صنعتی یه بورد
<a href="http://www.friendlyarm.net/products/smart210">Smart 210</a>
به دستم رسیده. این بورد ساخت شرکت
<a href="http://www.friendlyarm.net/">FriendlyARM</a>
هست که یه کمپانی چینی‌یه که سخت‌افزارهای ارزون‌قیمت صنعتی می‌سازه.
مشخصات ظاهری‌ش خوب به نظر می‌رسه. با این وجود از لحاظ نرم‌افزاری یک فاجعه‌ست!
این پست توضیحاتی در مورد طرز کار و بیشتر توضیح معایب این بورده. امیدوارم در
آینده برای کسایی که می‌خوان باهاش کار کنن مفید باشه یا لااقل باعث باشه از خریدش
منصرف بشن (:</p>

<p><img class="center" src="https://soroush.github.io/images/posts/smart210/smart210.jpg" title="بورد اصلی و پردازندهٔ Smart 210" ></p>

<!--more-->


<h1>سخت‌افزار</h1>

<p>این بورد یه سیستم-روی-چیپ مدل
<a href="http://system-on-a-chip.specout.com/l/341/Samsung-Intrinsity-S5PV210">Samsung S5PV210</a>
داره که پردازندهٔ صنعتی و مالتی‌مدیا به‌حساب میاد و ویژگی‌های خوبی هم داره از
جمله یک هستهٔ
ARM Cortex-A8
که با فرکانس یک گیگاهرتز کار می‌کنه و کلی امکانات مالتی‌مدیای دیگه که در کنار
هستهٔ آرم گذاشته شده. در کنار این اینترفیس‌ها یک پردازندهٔ گرافیکی
PowerVR SGX540
هم روی سیستم وجود داره که خیلی به‌درد می‌خوره. حافظهٔ اصلی بورد ۵۱۲ مگابایته که
خیلی خوبه. اینترفیس‌های زیادی هم برای کار با بورد در نظر گرفته شده از جمله:
Serial, SPI, I2C, I2S, SD/MMC, USB, LCD, Camera.</p>

<p>کیفیت ساخت بورد در حد قابل قبوله. استانداردهاش در ردهٔ صنعتی هستن و خیلی تمیز
کار شده. خوب تا این‌جا همه‌چی خیلی خوبه.  یه بورد داریم که سخت‌افزارش خوبه و خوب
مونتاژ شده. دیگه چی می‌خوایم؟ خوب معلومه! نرم‌افزار&hellip;</p>

<p><strong>ادعا:</strong> هر چقدر که سخت‌افزارهای بورد اسمارت خوب طراحی شدن، نرم‌افزارهای ارائه
شده براش بد هستن. به نظر من این آدم‌ها کوچکترین توانایی در کار با نرم‌افزار
نداشتن.</p>

<h2>کرنل</h2>

<p>اولین چیزی که برای کار کردن با یه بورد صنعتی لازمه یه کرنل لینوکس سبک هست که خوب
و مینیمال کانفیگ شده باشه. معمولا من دوست دارم خودم کرنل‌مو بسازم و کانفیگ‌های
چیپست یا ماژول‌ها (که معمولا به صورت پچ یا  رپوزیتوری گیت ارائه شدن) رو بعداً
روش بریزم. این کار چند تا مزیت داره. از جمله این که می‌تونیم در هر لحظه نسخهٔ
جدید کرنل رو جایگزین قبلی بکنیم. در واقع ما روی دو تا مجموعهٔ جدا از هم کار
می‌کنیم: ۱- سورس کرنل (سورس mainline) و ۲- تغییراتی که تولیدکنندهٔ بورد منتشر
کرده. معمولا این تغییرات برای SoCها انقدر اساسی هستند که تولیدکننده یه مخزن سورس
مستقل رو نگهداری می‌کنه. البته شما اگه به هر دلیلی نتونید از نسخهٔ کرنل
ارائه‌شده توسط تولیدکننده استفاده کنید، می‌تونید خیلی راحت از سورس اون‌ها و کرنل
اصلی diff بگیرید و پچ‌های به‌دست آمده رو روی نسخهٔ جدیدتری از کرنل سوار کنید.
(<strong>تجربه</strong>: فی‌الواقع با مقادیر بسیار زیادی دردسر)</p>

<p>تقریباً همهٔ کسایی که تو این زمینه کار می‌کنن از همین روند پیروی کردن. مثلا
Texas Instruments برای سیستم‌های OMAP اومده یه رپوزیتوری توی آدرس
<a href="http://git.omapzoom.org/">git.omapzoom.org</a>
در اختیار همه گذاشته. هر کسی می‌تونه هر کرنلی خواست رو بسازه. همین‌طور Allwinner
برای سیستم-روی-چیپ‌های فوق‌العادهٔ سری A کرنل رو به‌صورت مخزن گیت در اختیار عموم
گذاشته. اصلا هر عقل سلیمی این کار رو می‌کنه (:</p>

<h3>کانفیگ کرنل Smart210</h3>

<p>اما رفقای چینی‌مون چی‌کار کردن؟ رپوزیتوری گیت؟ یک سری پچ؟ اصلا سخت‌افزاری ساختن
که با کرنل mainline به‌خوبی کار می‌کنه؟ (آخری خیلی تخیلی بود). نه! هیچکدوم&hellip;
اون‌ها اومدن یه سری تاربال گذاشتن توی دراپ‌باکس! خوب تا این‌جاش رو میشه تحمل
کرد. سورس‌ها رو دانلود کردیم اما خیلی عجیب بود. آخه حجم سورس کرنل باید بشه ۱۰۰
مگابایت؟! مگه چقدر سورس می‌تونن نوشته باشن؟! چند تا ماژول؟ چند تا هک روی خود
کرنل؟ بعد از اکسترکت کردن تاربال متوجه شدم که حضرات باینری‌هایی که کامپایل کردن
رو هم گذاشتن بمونه. کلی فایل آبجکت به همراه خود کرنل کامپایل شده[!!] کنار
سورس‌ها بود&hellip;</p>

<p><img class="center" src="https://soroush.github.io/images/posts/smart210/dropbox.png" title="این مثلاً کرنله." ></p>

<p>بهرحال. از این هم گذشتیم. بریم سروقت کانفیگ کردن کرنل. معمولاً کسی که بوردی
می‌سازه، میاد یه سری defconfig همراهش منتشر می‌کنه که به شکل اصولی با وارد کردن
دستور <code>make zahremar_defconfig</code> بشه کانفیگ پیش‌فرض رو روی سورس کرنل اعمال کرد.
دوستامون همچین کاری نکردن. اصلا اعتقادی به سیستم‌های استاندارد ندارن. به‌جاش
اومدن یه اسکریپت داغون بش گذاشتن بغل سورس‌ها که یه سری فایل رو به‌جای
‪<code>.config</code>‬ کپی می‌کنه! این‌جوری:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DESTDIR</span><span class="o">=</span>/tmp/FriendlyARM/mini210
</span><span class='line'><span class="nv">ADSTDIR</span><span class="o">=</span><span class="k">${</span><span class="nv">DESTDIR</span><span class="k">}</span>/android
</span><span class='line'><span class="nv">LDSTDIR</span><span class="o">=</span><span class="k">${</span><span class="nv">DESTDIR</span><span class="k">}</span>/linux
</span><span class='line'>
</span><span class='line'>mkdir -p <span class="k">${</span><span class="nv">ADSTDIR</span><span class="k">}</span> <span class="k">${</span><span class="nv">LDSTDIR</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">CPU_JOB_NUM</span><span class="o">=</span><span class="k">$(</span>grep processor /proc/cpuinfo | awk <span class="s1">&#39;{field=$NF};END{print </span>
</span><span class='line'><span class="s1">field+1}&#39;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'>make distclean
</span><span class='line'>touch .scmversion
</span><span class='line'>
</span><span class='line'><span class="c"># build zImage for android</span>
</span><span class='line'>cp mini210_android_defconfig .config <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>   make -j<span class="k">${</span><span class="nv">CPU_JOB_NUM</span><span class="k">}</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>   cp -vf arch/arm/boot/zImage <span class="k">${</span><span class="nv">ADSTDIR</span><span class="k">}</span>/zImage <span class="o">||</span> <span class="nb">exit </span>1
</span><span class='line'>
</span><span class='line'>cp mini210-tvp5150_android_defconfig .config <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>  make -j<span class="k">${</span><span class="nv">CPU_JOB_NUM</span><span class="k">}</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>  cp -vf arch/arm/boot/zImage <span class="k">${</span><span class="nv">ADSTDIR</span><span class="k">}</span>/zImage_tvp5150 <span class="o">||</span> <span class="nb">exit </span>1
</span><span class='line'>
</span><span class='line'>make distclean
</span><span class='line'>touch .scmversion
</span><span class='line'>
</span><span class='line'><span class="c"># build zImage for linux</span>
</span><span class='line'>cp mini210_linux_defconfig .config <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>  make -j<span class="k">${</span><span class="nv">CPU_JOB_NUM</span><span class="k">}</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>  cp -vf arch/arm/boot/zImage <span class="k">${</span><span class="nv">LDSTDIR</span><span class="k">}</span>/zImage <span class="o">||</span> <span class="nb">exit </span>1
</span><span class='line'>
</span><span class='line'>cp mini210-tvp5150_linux_defconfig .config <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>  make -j<span class="k">${</span><span class="nv">CPU_JOB_NUM</span><span class="k">}</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>  cp -vf arch/arm/boot/zImage <span class="k">${</span><span class="nv">LDSTDIR</span><span class="k">}</span>/zImage_tvp5150 <span class="o">||</span> <span class="nb">exit </span>1
</span></code></pre></td></tr></table></div></figure>


<p>باید این فایل رو باز کنیم، براساس کاری که می‌خوایم انجام بدیم (کرنل لینوکس یا
اندرویید) قسمت‌هایی از سورس رو حذف کنیم، و بعد بزنیم اجراش کنیم تا بره از
مسیرهای موردنظر فایل‌های موردنظر رو به‌جای فایل کانفیگ کپی کنه. بماند که انجام
این کار  به‌جای استفاده از defconfig ها چقدر غیراصولی و احمقانه‌ست. حضرات حتا به
خودشون اجازه دادن مشخص کنن که من چند هسته‌ای باید کامپایل کنم! (تعداد هسته‌های
پردازنده‌م رو شمردن).</p>

<h3>کامپایل کردن کرنل</h3>

<p>خوب بعد از کانفیگ میریم سروقت کامپایل کرنل. این که یه کرنل بار اول کامپایل نشه
خیلی جای تعجب نداره. معمولاً باید خیلی باهاش سر و کله زد. این کرنل هم بار اول
کامپایل نشد. بعد از کمی سر و کله زدن متوجه شدم اصلا با فلگ ‪-Wall‬ امکان کامپایل
این سورس وجود نداره! این یه فاجعه‌ست چون کرنل باید حتماً بدون اخطار کامپایل
بشه&hellip; اون‌هم با فلگ‌های <code>‪-Wall -Werror --pedantic‬</code> که کوچکترین جای خطایی باقی
نمونه. مثلا در مورد strict aliasing و لی‌آوت‌های حافظه، کرنل جایی نیست که بخوایم
اخطارهای کامپایلر رو نادیده بگیریم! اصلا شما با زیرساخت buildroot <strong>نمی‌تونید</strong>
این فلگ‌ها رو خاموش کنید (: اما دوست‌های چینی‌مون یه کدهایی نوشتن که کامپایل
نمیشه. از اون بدتر این که نشستن برای کرنل لینوکس (دقت کنید <strong>کرنل لینوکس</strong>) یه
سری میک‌فایل دستی نوشتن که فلگ‌های مربوطه از توش برداشته شده. آدم دلش می‌خواد
سرشو بکوبه به دیوار&hellip;</p>

<h2>بوت‌لودر</h2>

<p>بعد از تلاش‌های متعدد و اصلاح چندین خط کد و حذف کامل چندین ماژول (که همه‌شونو
FriendlyARMای‌ها نوشته بودن) بالأخره کرنل کامپایل شد. حالا باید بریم بریزیمش روی
بورد و یه بوت‌لودر بسازیم که سخت‌افزارهای اولیه رو initialize کنه. برای این کار
معمولا از
<a href="">u-boot</a>
استفاده می‌کنیم چون تعداد خیلی زیادی از SDRAMها و فلش‌ها و اکثر کنترلرهای
سخت‌افزاری سطح‌پایین برای ذخیره‌سازی رو توش داره و شما خیلی راحت می‌تونید با یه
کانفیگ کوچیک بوت‌لودر بسازید. مگر این که از باس‌های نامتعارف و Programmable IO
استفاده کرده باشید (که معمولاً طراح سخت‌افزار این کار رو می‌کنه). اکثر
سخت‌افزارها یک کانفیگ مشخص برای u-boot دارن و یا حتا نسخهٔ مناسب u-boot ارائه
دادن. این نسخه‌ها بعد از مدتی در صورت صلاح‌دید نویسنده‌های u-boot وارد پروژهٔ
اصلی میشن. در حال حاضر اکثر بوردهای پرکاربرد توسط u-boot پشتیبانی میشن. مثل
کابی، رزبری، مری، هامینگ، اودرویدها و خیلی بوردهای دیگه.</p>

<p>خوب فکر می‌کنید دوست‌های چینی‌مون در مورد بوت‌لودر چه کاری انجام دادن؟ یه کانفیگ
ساده برای u-boot یا یه رپوزیتوری مجزا؟ جواب اینه که هیچکدوم. این احمق‌ها صلاح
ندیدن از روش استاندارد بوت که همه ازش استفاده می‌کنند استفاده کنن. نشستن خودشون
یک بوت‌لودر مزخرف به اسم Superboot نوشتن و سورسش رو هم منتشر نکردن. این بوت‌لودر
به‌قدری افتضاحه که شما باهاش هیچ‌کاری نمی‌تونید انجام بدید به جز این:</p>

<ul>
<li>نصب سیستم‌عامل با لی‌آوت حافظهٔ تحمیل شده توسط سازنده‌های بورد</li>
<li>بالا آوردن سیستم‌عامل</li>
</ul>


<p>خوب این لی‌آوت چیه؟ میشه گفت یه‌جور پارتیشن‌بندی برای MTD یا همون حافظهٔ فلش که
قراره سیستم‌عامل بره روش بشینه. این پارتیشن‌بندی کاملاً ثابت و غیرقابل تغییر
درنظر گرفته شده. یعنی من نمی‌تونم تصمیم بگیرم که کرنل رو کجا بریزم و یا این که
اصلاً چند تا پارتیشن داشته باشم و هرکدوم چه اندازه‌ای داشته باشه و چه نودی روش
سوار (مانت) بشه. خوب خوشحالیم آره؟ بهرحال از اینم گذشتیم&hellip; تصمیم گرفتم با همون
بوت‌لودر مزخرف جلو برم. اول باید رایتش می‌کردم روی کارت اس‌دی. اما کجای کارت
اس‌دی؟ اولش؟ آخرش؟ با ۵۱۲ بایت آفست؟ هر چیزی رو امتحان کردم و نشد. حضرات خودشون
یه برنامهٔ فکستنی ویندوزی نوشتن که فقط با استفاده از اون میشه بوت‌لودر رو روی
کارت ریخت. احمق‌ها! مجبور شدم برم روی ویندوز و بوت‌لودر و ایمیج سیستم‌عامل رو
رایت کنم.</p>

<h3>اولین تلاش برای بوت</h3>

<p>خوب بعد از کلی فحش دادن اولین تلاش برای بوت با شکست مواجه شد. طبیعی هم هست
البته. خیلی کم پیش میاد کرنلی بار اول کار کنه. لاگ سریال رو نگاه کردم که ببینم
کدوم ماژول نتونسته بالا بیاد یا کجا پنیک داده یا چی. ولی چیزی که دیدم خیلی عجیب
بود:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Freeing init memory: 1408K
</span><span class='line'>/init: line 103: can<span class="err">&#39;</span>t open /r/dev/console: no such file
</span><span class='line'>Kernel panic - not syncing: Attempted to <span class="nb">kill </span>init!
</span></code></pre></td></tr></table></div></figure>


<p>وات د فاک؟ ‪<code>/r/dev/console</code>‬ دیگه چه کوفتیه؟ اصلا تا حالا همچین چیزی به گوش کسی
نخورده بود. یه سرچ ساده نشون میده که این مشکل فقط مختص این بورد هست. کاشف به عمل
آمد که این احمق‌ها کرنل‌شون بالا نمی‌اومده (ظاهراً به دلیل نبود initramfs یا
اشکالی مشابه) بعد عوض این که بشینن مثل آدم یه دونه cpio تنظیم کنن که با کرنل
کامپایل بشه و در نهایت بچسبه به کرنل، برداشتن یه cpio درست کردن باینری‌شو
گذاشتن. و داخل این cpio هم یه اسکریپت احمقانه هست که معلوم نیست چه قلطی می‌کنه:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'><span class="nv">runlevel</span><span class="o">=</span>S
</span><span class='line'><span class="nv">prevlevel</span><span class="o">=</span>N
</span><span class='line'><span class="nb">umask </span>022
</span><span class='line'><span class="nb">export </span>PATH runlevel prevlevel
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Trap CTRL-C &amp;c only in this shell so we can interrupt subprocesses.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nb">trap</span> <span class="s2">&quot;:&quot;</span> INT QUIT TSTP
</span><span class='line'>/bin/hostname FriendlyARM
</span><span class='line'>/bin/mount -n -t proc proc /proc
</span><span class='line'>
</span><span class='line'><span class="nv">cmdline</span><span class="o">=</span><span class="sb">`</span>cat /proc/cmdline<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ROOT</span><span class="o">=</span>none
</span><span class='line'><span class="nv">ROOTFLAGS</span><span class="o">=</span>
</span><span class='line'><span class="nv">ROOTFSTYPE</span><span class="o">=</span>
</span><span class='line'><span class="nv">NFSROOT</span><span class="o">=</span>
</span><span class='line'><span class="nv">IP</span><span class="o">=</span>
</span><span class='line'><span class="nv">INIT</span><span class="o">=</span>/sbin/init
</span><span class='line'>
</span><span class='line'><span class="k">for </span>x in <span class="nv">$cmdline</span> ; <span class="k">do</span>
</span><span class='line'><span class="k">  case</span> <span class="nv">$x</span> in
</span><span class='line'>  <span class="nv">root</span><span class="o">=</span>*<span class="o">)</span>
</span><span class='line'>      <span class="nv">ROOT</span><span class="o">=</span><span class="k">${</span><span class="nv">x</span><span class="p">#root=</span><span class="k">}</span>
</span><span class='line'>      ;;
</span><span class='line'>  <span class="nv">rootfstype</span><span class="o">=</span>*<span class="o">)</span>
</span><span class='line'>      <span class="nv">ROOTFSTYPE</span><span class="o">=</span><span class="s2">&quot;-t ${x#rootfstype=}&quot;</span>
</span><span class='line'>      ;;
</span><span class='line'>  <span class="nv">rootflags</span><span class="o">=</span>*<span class="o">)</span>
</span><span class='line'>      <span class="nv">ROOTFLAGS</span><span class="o">=</span><span class="s2">&quot;-o ${x#rootflags=}&quot;</span>
</span><span class='line'>      ;;
</span><span class='line'>  <span class="nv">init</span><span class="o">=</span>*<span class="o">)</span>
</span><span class='line'>      <span class="nv">INIT</span><span class="o">=</span><span class="k">${</span><span class="nv">x</span><span class="p">#init=</span><span class="k">}</span>
</span><span class='line'>      ;;
</span><span class='line'>  <span class="nv">nfsroot</span><span class="o">=</span>*<span class="o">)</span>
</span><span class='line'>      <span class="nv">NFSROOT</span><span class="o">=</span><span class="k">${</span><span class="nv">x</span><span class="p">#nfsroot=</span><span class="k">}</span>
</span><span class='line'>      ;;
</span><span class='line'>  <span class="nv">ip</span><span class="o">=</span>*<span class="o">)</span>
</span><span class='line'>      <span class="nv">IP</span><span class="o">=</span><span class="k">${</span><span class="nv">x</span><span class="p">#ip=</span><span class="k">}</span>
</span><span class='line'>      ;;
</span><span class='line'>
</span><span class='line'>  <span class="k">esac</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -z <span class="nv">$NFSROOT</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="nv">$NFSROOT</span> | sed s/:/<span class="se">\ </span>/g  &gt; /dev/x ;  <span class="nb">read </span>sip dir &lt; /dev/x
</span><span class='line'>  <span class="nb">echo</span> <span class="nv">$IP</span> | sed s/:/<span class="se">\ </span>/g &gt; /dev/x;  <span class="nb">read </span>cip sip2 gip netmask hostname
</span><span class='line'>device autoconf &lt; /dev/x
</span><span class='line'>  rm /dev/x
</span><span class='line'>  <span class="nb">echo</span> <span class="nv">$sip</span> <span class="nv">$dir</span> <span class="nv">$cip</span> <span class="nv">$sip2</span> <span class="nv">$gip</span> <span class="nv">$netmask</span> <span class="nv">$hostname</span> <span class="nv">$device</span> <span class="nv">$autoconf</span>
</span><span class='line'>  mount -t nfs <span class="nv">$NFSROOT</span> /r -o nolock,proto<span class="o">=</span>tcp
</span><span class='line'>  <span class="c">#[ -e /r/dev/console ] || exec /bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="k">elif</span> <span class="o">[</span> ! -z <span class="nv">$run_fs_image</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">ROOTFSTYPE</span><span class="o">=</span><span class="s2">&quot;-t ext3&quot;</span>
</span><span class='line'>  <span class="k">for </span>i in 1 2 3 4 5 ; <span class="k">do</span>
</span><span class='line'>  /bin/mount -n -o sync -o noatime -o nodiratime -t vfat /dev/mmcblk0p1
</span><span class='line'>/sdcard <span class="o">&amp;&amp;</span> <span class="nb">break</span>
</span><span class='line'><span class="nb"> echo </span>Waiting <span class="k">for </span>SD Card...
</span><span class='line'>  sleep 1
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'>  /sbin/losetup /dev/loop0 /sdcard/<span class="nv">$run_fs_image</span>
</span><span class='line'>  /bin/mount <span class="nv">$ROOTFSTYPE</span> /dev/loop0 /r
</span><span class='line'>  mount -o move /sdcard /r/sdcard
</span><span class='line'>  <span class="c">#/sbin/losetup /dev/loop1 /r/sdcard/swap</span>
</span><span class='line'>  <span class="c">#/sbin/swapon /dev/loop1</span>
</span><span class='line'>
</span><span class='line'><span class="k">elif</span> <span class="o">[</span> x<span class="k">${</span><span class="nv">ROOT</span><span class="p">:</span><span class="nv">0</span><span class="p">:</span><span class="nv">13</span><span class="k">}</span> <span class="o">=</span> <span class="s2">&quot;x/dev/mmcblk0p&quot;</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">  for </span>i in 1 2 3 4 5 ; <span class="k">do</span>
</span><span class='line'>  /bin/mount -n <span class="nv">$ROOTFLAGS</span> <span class="nv">$ROOTFSTYPE</span> <span class="nv">$ROOT</span> /r <span class="o">&amp;&amp;</span> <span class="nb">break</span>
</span><span class='line'><span class="nb"> echo </span>Waiting <span class="k">for </span>SD Card...
</span><span class='line'>  sleep 1
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  /bin/mount -n <span class="nv">$ROOTFLAGS</span> <span class="nv">$ROOTFSTYPE</span> <span class="nv">$ROOT</span> /r
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ONE_WIRE_PROC</span><span class="o">=</span>/proc/driver/one-wire-info
</span><span class='line'><span class="nv">ETC_BASE</span><span class="o">=</span>/r/etc
</span><span class='line'><span class="o">[</span> -d /r/system/etc <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nv">ETC_BASE</span><span class="o">=</span>/r/system/etc
</span><span class='line'><span class="o">[</span> -e <span class="nv">$ETC_BASE</span>/ts.detected <span class="o">]</span> <span class="o">&amp;&amp;</span> . <span class="nv">$ETC_BASE</span>/ts.detected
</span><span class='line'><span class="o">[</span> -z <span class="nv">$CHECK_1WIRE</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nv">CHECK_1WIRE</span><span class="o">=</span>Y
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$CHECK_1WIRE</span> <span class="o">=</span> <span class="s2">&quot;Y&quot;</span> -a -e <span class="nv">$ONE_WIRE_PROC</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">  if </span><span class="nb">read </span>lcd_type fw_ver tail &lt; <span class="nv">$ONE_WIRE_PROC</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> x<span class="nv">$lcd_type</span> <span class="o">=</span> <span class="s2">&quot;x0&quot;</span> -a x<span class="nv">$fw_ver</span> <span class="o">=</span> <span class="s2">&quot;x0&quot;</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">          </span><span class="nv">TS_DEV</span><span class="o">=</span>/dev/touchscreen
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'><span class="k">          </span><span class="nv">TS_DEV</span><span class="o">=</span>/dev/touchscreen-1wire
</span><span class='line'>          <span class="nb">echo</span> <span class="s2">&quot;1Wire touchscreen OK&quot;</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> -e <span class="nv">$ETC_BASE</span>/friendlyarm-ts-input.conf <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">          </span>sed <span class="s2">&quot;s:^\(TSLIB_TSDEVICE=\).*:\1$TS_DEV:g&quot;</span>
</span><span class='line'><span class="nv">$ETC_BASE</span>/friendlyarm-ts-input.conf &gt; <span class="nv">$ETC_BASE</span>/ts-autodetect.conf
</span><span class='line'>          mv <span class="nv">$ETC_BASE</span>/ts-autodetect.conf
</span><span class='line'><span class="nv">$ETC_BASE</span>/friendlyarm-ts-input.conf -f
</span><span class='line'>          <span class="nb">echo</span> <span class="s2">&quot;CHECK_1WIRE=N&quot;</span> &gt; <span class="nv">$ETC_BASE</span>/ts.detected
</span><span class='line'>          sync
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">  fi</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span> -e /r/etc/friendlyarm-ts-input.conf <span class="o">]</span> <span class="o">&amp;&amp;</span> . /r/etc/friendlyarm-ts-input.conf
</span><span class='line'><span class="o">[</span> -e /r/system/etc/friendlyarm-ts-input.conf <span class="o">]</span> <span class="o">&amp;&amp;</span> .
</span><span class='line'>/r/system/etc/friendlyarm-ts-input.conf
</span><span class='line'><span class="nb">export </span>TSLIB_TSDEVICE
</span><span class='line'>
</span><span class='line'><span class="c">#exec /bin/sh</span>
</span><span class='line'>
</span><span class='line'>umount /proc
</span><span class='line'><span class="nb">exec </span>switch_root /r <span class="nv">$INIT</span> &lt;/r/dev/console &gt;/r/dev/console 2&gt;&amp;1
</span></code></pre></td></tr></table></div></figure>


<p>آخرین خط این اسکریپت یه کار احمقانه انجام داده. با یه سرچ ساده می‌تونیم ببینیم که اصلا عبارت
<code>/r/dev</code>
ما رو مستقیم می‌بره به فروم‌های فرندلی‌آرم و هیچ نتیجهٔ دیگه‌ای از جستجو عایدمون نمی‌شه. پس این
شاهکار مختص برادرای چینی‌مون در فرندلی‌آرم می‌باشد.</p>

<h2>نتیجه‌گیری</h2>

<p>من در آخر نتونستم کرنلی که چینی‌ها ساخته بودن رو با زیرساخت بیلدروت کامپایل کنم و تصمیم گرفتم
خودم برای این بورد کرنل بسازم و کانفیگ کنم. این کار نباید خیلی سخت باشه چون با یه سری
diffگیری از سورس کرنل فرندلی آرم و سورس اصلی کرنل (نسخهٔ ۳٫۰٫۸) به این نتیجه رسیدم که تنهاقسمت‌هایی
که اضافه شدن ماژول‌هایی مربوط به کنترل LEDهای روی بورد و هشت تا دکمهٔ کنترلی هستند. خیر سرشون اصلا
نخواستیم این‌ها رو. یک سری تغییراتی هم توی فلگ‌های ماژول FAT انجام دادن که حقیقتش نفهمیدم چرا.</p>

<p>در مورد بوت‌لودر اما به‌طور کلی نمیشه از بوت‌لودرهایی که این احمق‌ها فراهم کردن (اون هم به شکل باینری)
برای یه سیستم‌عامل اختصاصی استفاده کرد. همچنین هیچ بوت‌لودر استانداردی برای این بورد کانفیگ نشده.
تصمیم گرفتم U-Boot رو برای این بورد پورت کنم. هنوز خیلی از کاراش مونده که انجام بشه و واقعا کار سخت
و طاقت‌فرسایی هست. از کد نوشتن اسمبلی ARM تا کنترل باس و دیوایس‌های روی بورد :(</p>

<p>نتیجهٔ آخر این که <strong>هرگز</strong> از یه تولیدکنندهٔ چینی بورد نخرید. اگر طراحی‌ش مال جای دیگه باشه شاید بشه
مشکلات کیفیت و پایداری پایین‌ش رو تحمل کرد. اما اگه چینی‌ها طراحی‌ش کردن و نرم‌افزارهاش رو ارائه دادن
سمتش نرید.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[برمی‌گردم]]></title>
    <link href="https://soroush.github.io/blog/return/"/>
    <updated>2015-07-03T00:00:00+04:30</updated>
    <id>https://soroush.github.io/blog/return</id>
    <content type="html"><![CDATA[<p>خوب بالأخره بعد از گذشت چند ماه مطلاطم شرایط زندگی‌م تقریباً به ثبات نسبی رسیده
و با خیال راحت می‌تونم به کارهام برسم (:</p>

<p>چیزهایی که تو ذهنمه خیلی زیاده، چیزهای زیادی باید بنویسم، کارهای زیادی باید
بکنم، پروژه‌های زیادی هستند که باید در موردشون بنویسم و هزار و یک تا کار دیگه&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[تغییرات بزرگ]]></title>
    <link href="https://soroush.github.io/blog/changes/"/>
    <updated>2015-03-05T00:00:00+03:30</updated>
    <id>https://soroush.github.io/blog/changes</id>
    <content type="html"><![CDATA[<p>خیلی وقته که توی اینترنت فعالیت چندانی ندارم و اصولاً چند ماهی هست که از کل
دنیا عقب افتادم!</p>

<p>توی این چند ماه اتفاقات خیلی زیادی افتاده و زندگی‌م تقریباً داره به‌طور
کلی عوض میشه. اول این که متأسفانه به‌طور کامل تو تهران ساکن شدم. دیگه برنمی‌گردم
مگر تعطیلات و غیره :( دوم این که یه کار خوب پیدا کردم توی یه شرکت خوب و باسابقه
و با سیستم کاملاً منطقی و با حقوق نسبتاً بالا (برای یه لیسانس).</p>

<p>تا چه شود&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[کتابخانهٔ Dynamixel]]></title>
    <link href="https://soroush.github.io/blog/libdynamixel-c%2B%2B11-api/"/>
    <updated>2015-01-07T00:00:00+03:30</updated>
    <id>https://soroush.github.io/blog/libdynamixel-c++11-api</id>
    <content type="html"><![CDATA[<p>مدتی هست که هم توی شبکه‌های اجتماعی و هم این‌جا فعالیتم خیلی کم شده. دلیلش
پروژه‌ای هست که در حال حاضر وقت خیلی زیادی ازم می‌گیره و مجبورم به‌خاطرش
مسافرت‌های طولانی رو برم و برگردم.</p>

<p>اما ماحصل یکی از این سفرها یک کتابخانهٔ جدید و بسیار خوشگل و مرتب شده به اسم
libdynamixel.
این کتابخانه یک API سطح بالا برای کنترل و استفاده از سروو موتورهای
هوشمند داینامیکسل طراحی شده. این پست در مورد ویژگی‌های این کتابخانه است.</p>

<!--more-->


<h1>داینامیکسل</h1>

<p>به قول سایت نمایندگی روبوتیس در ایران:</p>

<blockquote><p>سرومو وتورهای DYNAMIXEL، محصول شرکت روبوتیس، که با رویکردهای خاص روباتیک طراحی شده‌اند، دارای  ساختار شبکه‌ای می‌باشند و ضمن دریافت فرمان از کنترلر اصلی می‌توانند اطلاعات مختلفی نظیر موقعیت، سرعت و بار موتور، دمای داخلی ماژول، ولتاژ ورودی و غیره به آن برگردانند. سروموتور داینامیکسل را هم از طریق رایانه به کمک واسط USB2Dynamixel و هم به کمک پردازنده‌های میکروکنترلری می‌توان کنترل نمود. </p><p>این سروموتورها را به علت دارا بودن قابلیت گردش کامل می‌توان هم در حالت کنترل موقعیت به عنوان سروموتور و هم در حالت کنترل سرعت به عنوان موتور با فیدبک انکدر استفاده نمود. نسل جدید سروموتورهای داینامیکسل (سری MX) دارای پردازنده ۳۲ بیتی ARM و انکدر ۱۲ بیتی می‌باشند و قادر هستند در تمام محدود °۳۶۰ موقعیت موتور را کنترل نمایند.</p><p>امروزه این سروموتورها نامی آشنا در لیگ‌های مختلف ربوکاپ نظیر لیگ روبات‌های خانگی، روبات‌های امداد و نجات، روبات‌های مین‌یاب و به خصوص لیگ روبات‌های فوتبالیست انسان نما (در سایزهای مختلف Kid Size و Teen Size و Adule Size) می‌باشد. همچنین این سروموتورها در پروژه‌های مختلف علمی و پژوهشی استفاده‌های فراوان دارند.</p><footer><strong>http://www.pishrobot.com/products/dynamixel.htm  پیشروبات</strong></footer></blockquote>


<p>اولین بار سال ۸۸ توی پروژهٔ روبات‌های انسان‌نما (که بعداً باید درباره‌ش بنویسم)
با این با این کوچولوهای قهرمان آشنا شدم.  اونجا ما از مدل
AX12
استفاده می‌کردیم که ارزون‌ترین و ضعیف‌ترین مدل این سری بود. اما مدتی پیش برای
انجام پروژهٔ فعلی‌مون به کارفرما گفتیم دو تا موتور سری
MX28
برای پروژه بخره. بعد از یه سری ملق زدن توی اینترنت متوجه میشیم که هیچ API درست
درمونی برای ارتباط با این موتورها توی زبان‌های خفن و خوشگل مثل سی++ و سی++۱۱
وجود نداره. چند تا کتابخونهٔ خوب برای سی بود البته.</p>

<p>خوب من تصمیم گرفتم یه دونه درست کنم و بذارم گیت‌هاب. نتیجه‌ش شد این:
<a href="https://github.com/soroush/libdynamixel">libdynamixel</a>
سعی کردم تمام مدل‌های ممکن رو پشتیبانی کنم که البته فقط دوتا مدلی که در اختیار
دارم رو تونستم تست کنم. این
API
کامل شده اما چند تا ویژگی خوب دیگه هست که تعطیلات عید بهش اضافه می‌کنم.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ارتباط میان‌زبانی]]></title>
    <link href="https://soroush.github.io/blog/porting-guide/"/>
    <updated>2014-10-18T00:00:00+03:30</updated>
    <id>https://soroush.github.io/blog/porting-guide</id>
    <content type="html"><![CDATA[<blockquote><p>زبان مورد استفاده برای پیاده‌سازی یک ابزار، یکی از ویژگی‌های آن نیست.</p></blockquote>


<p>دنیا پر از ابزارها و کتابخانه‌هایی هست که به‌دست برنامه‌نویسان مختلفی
به‌زبان‌های مختلف نوشته شدن. بدون وجود این کتابخانه‌ها و ابزارها زندگی برای ما
برنامه‌نویس‌ها (به‌دلایلی واضح) خیلی سخت می‌شد.</p>

<p>به عقیدهٔ من همه‌چیز باید همه‌جا برای همه‌کس قابل استفاده باشه. یعنی این که
مثلاً این که من فلان کتابخانهٔ کاربردی و باحال رو با زبان ‪C++‬ پیاده‌سازی کردم
نباید باعث بشه که یک برنامه‌نویس پایتون یا جاوا نتونه ازش استفاده کنه. حتا
زبان‌هایی که دامنه و کاربرد مختلفی دارن باید پشتیبانی بشن. مثلاً یکی از
ابزارهایی که ساختم در اصل به‌عنوان یک «حل‌کنندهٔ مسأله» برای کاربردهای پیشرفتهٔ
هوش مصنوعی طراحی شده، و این‌چنین موضوعاتی معمولاً  برای کاربردهای سیستمی و
خاص‌منظوره استفاده میشن. اما هیچ دلیلی وجود نداره که یک برنامه‌نویس وب برای یک
اپلیکیشن آنلاین نخواد از مدل‌سازی ارضای محدودیت برای حل یک سری مسائل داخل
برنامه‌ش استفاده کنه، یا یک برنامه‌نویس اندرویید نخواد از سیستم‌های استنتاج فازی
برای برنامه‌ش استفاده کنه. بنابراین وظیفهٔ منِ برنامه‌نویس است، که برای تمام
زبان‌هایی که می‌تونم، <strong>رابط</strong> (=>interface)های <strong>بومی</strong> (=>native) فراهم کنم تا همه
بتونن از ابزارم استفاده کنن.</p>

<p>توی این پست نحوهٔ ایجاد رابط برای زبان‌های مختلف رو توضیح میدم. طبق این روش
ساده، میشه به‌راحتی برای کتابخانه‌های ‪C++‬ رابط‌هایی برای تمام زبان‌های دیگه
پیاده‌سازی کرد.</p>

<!--more-->


<p>فلسفهٔ یونیکس میگه که هر ابزار باید یک کار رو به شکلی خوب انجام بده. همچنین از
نظر یونیکس چیزهایی که کارهایی رو به‌شکلی خوب انجام میدن با خط‌لوله(=>فارسی‌شدهٔ
پایپ) با هم ترکیب میشن تا کارهای بزرگتر رو انجام بدن. از این فلسفه خیلی خوشم
میاد و سعی کردم توی تمام چیزهایی که می‌سازم پیاده‌سازی‌ش کنم. با این حال اگر با
طرز فکری مشابه بخوام ارتباط بین ابزارها رو تأمین کنم، باید رابط‌های خط‌فرمان
خیلی سخت (و نه‌پیچیده)‌ای رو پیاده‌سازی کنم. که البته این کار رو هم کردم (: اما
ارتباطی که من ازش صحبت می‌کنم در ردهٔ پایین‌تری هست. یعنی نمی‌خوام که یک
برنامهٔ مجزا هر بار فراخوانی بشه و کلی ورودی بگیره و کلی هم خروجی چاپ کنه و یک
سری پایپ‌هایی متوالی برای پردازش اطلاعات استفاده بشه (باوجود این که این کار
خیلی زیبا هست). در عوض می‌خوام در سطح پایین‌تر، کتابخانهٔ مشترکی که نوشتم، به
شکل یک API
برای هر زبان برنامه‌نویسی هدف در دسترس باشه. برای این کار باید APIهای
<strong>بومی</strong> هر زبان پیاده‌سازی بشه که در پشت صحنه از فراخوانی‌های کتابخونهٔ اصلی
استفاده می‌کنن.</p>

<p>اما این کار چطور ممکنه؟ مشکلات زیادی وجود داره. اول این که ABIی هر زبان فرق با
زبان‌های دیگه متفاوته. دوم این که خیلی از زبان‌ها (از جمله زبان‌های مفسری) اصلا
ABI
ندارن. کلاً باینری ندارن که ساختار باینری تعریف‌شده داشته باشند. سومین مشکل هم
اینه که هر زبانی یک مجموعهٔ مشخصی از ویژگی‌ها داره که با زبان دیگه همخوانی
نداره. حتا با فرض همخوانی
ABI
نمیشه روی یک رابط مشخص بین زبان‌ها توافق کرد. مثلاً بین زبان‌های شی‌گرا،
پیاده‌سازی شی‌گرایی خیلی تنوع داره. پس چیزی که من بهش توی ‪C++‬میگم <strong>کلاس</strong> یا
<strong>اینترفیس</strong> با تعریف یک برنامه‌نویس گو فرق داره. حتا گیریم ساختارهای باینری
این دو زبان یکی باشن، من چطور باید یک رابط برنامه‌نویسی برای گو فراهم کنم؟</p>

<p>در واقع باید یک همچین ساختاری وجود داشته باشه:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>                                               +---------+
</span><span class='line'>                                           +---> Python  |
</span><span class='line'>                                           |   +---------+
</span><span class='line'>                                           |              
</span><span class='line'>+--------------------+                     |   +---------+
</span><span class='line'>|                    |    +-----------+    +---> Fortran |
</span><span class='line'>| C++ API            |    |           |    |   +---------+
</span><span class='line'>| Shared Library     &lt;----> The Magic &lt;----+              
</span><span class='line'>| (Object Oriented)  |    |           |    |   +---------+
</span><span class='line'>|                    |    +-----------+    +---> Golang  |
</span><span class='line'>+--------------------+                     |   +---------+
</span><span class='line'>                                           |              
</span><span class='line'>                                           |   +---------+
</span><span class='line'>                                           +---> Perl    |
</span><span class='line'>                                               +---------+</span></code></pre></td></tr></table></div></figure>


<p>که در اون <strong>The Magic</strong> یک رابط باینری جهانی و استاندارد هست که تمام زبان‌های
برنامه‌نویسی مجبور هستند به نحوی پیاده‌سازی‌ش کنن. خوشبختانه این رابط نه تنها
وجود داره، بلکه رابطِ یک زبان برنامه‌نویسی استاندارد هم هست و اون زبان بی‌شک
چیزی نیست جز: <strong>The C Programming Language</strong>.</p>

<p>باید یک روشی پیدا کنم که رابط برنامه‌نویسی ‪C++‬ رو به C پورت کنم و بعد از اون
تمام زبان‌ها می‌تونن wrapperهایی به‌شکل بومی و با استفاده از رابط Cی
کتابخونه‌ای
که ساختم استفاده کنن. در واقع میشه این:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>                                  +---------+
</span><span class='line'>                            +-----> Python  |
</span><span class='line'>+----------------------+    |     +---------+
</span><span class='line'>|  C Interface         |    |                
</span><span class='line'>|  (Flattened API)     |    |     +---------+
</span><span class='line'>| +------------------+ |    +-----> Fortran |
</span><span class='line'>| |                  | |    |     +---------+
</span><span class='line'>| | C++ API          | >----+                
</span><span class='line'>| | (Object Oriented)| |    |     +---------+
</span><span class='line'>| |                  | |    +-----> Golang  |
</span><span class='line'>| +------------------+ |    |     +---------+
</span><span class='line'>+----------------------+    |                
</span><span class='line'>                            |     +---------+
</span><span class='line'>                            +-----> Perl    |
</span><span class='line'>                                  +---------+</span></code></pre></td></tr></table></div></figure>


<p>خوب برای پورت کردن کد سی++ به سی لازمه که تمام کلاس‌ها و namespaceها رو از بین
ببریم. برای این کار باید همه‌چیز به سبک شی‌گرایی سی پیاده‌سازی بشه. به این صورت
که یک مجموعه از توابع داریم، که آرگومان اول همه‌شون، اشاره‌گری به شی‌ای هست که
قصد داریم متدی از اون رو فراخوانی کنیم. اسم این ایده PIMPL idiom هست. و به
استفاده از این ایده برای طراحی رابط C میگن C wrapper for C++ API یک مثال
می‌تونه
خیلی مفید باشه. این کلاس ‪C++‬‬ رو در نظر بگیرید:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// foo.hpp</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Foo</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span> <span class="n">s</span> <span class="p">);</span>
</span><span class='line'>    <span class="o">~</span><span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">bar</span><span class="p">(</span> <span class="kt">int</span> <span class="n">j</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">notYourBusiness</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>برای این کلاس رابط C داخل یک هدر مجزا برای زبان C به این شکل پیاده‌سازی میشه:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// foo.h</span>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo_Type</span><span class="p">;</span> <span class="c1">// An opaque type</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">Foo_Type</span> <span class="n">Foo_Type</span><span class="p">;</span>
</span><span class='line'><span class="n">Foo_Type</span><span class="o">*</span> <span class="nf">Foo_create</span><span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">s</span> <span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Foo_destroy</span><span class="p">(</span> <span class="n">Foo_Type</span> <span class="o">*</span> <span class="n">v</span> <span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">Foo_bar</span><span class="p">(</span> <span class="n">Foo_Type</span> <span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span> <span class="p">);</span>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>و پیاده‌سازی این رابط، داخل سورس ‪C++‬ همون کلاس (یا هر جای دیگه‌ای) به این شکل
انجام میشه:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// foo.cpp (or foo_c.cpp)</span>
</span><span class='line'><span class="n">Foo_Type</span><span class="o">*</span> <span class="n">Foo_create</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Foo_Type</span><span class="o">*</span> <span class="n">ms</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span> <span class="cm">/* ممکنه سازندهٔ رشته استثنا صادر کنه*/</span>
</span><span class='line'>        <span class="n">ms</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Foo</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(...)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span> <span class="n">ms</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Foo_destroy</span><span class="p">(</span><span class="n">Foo_Type</span><span class="o">*</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Foo</span> <span class="o">*</span> <span class="n">ms</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">ms</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Foo_bar</span><span class="p">(</span><span class="n">Foo_Type</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Foo</span> <span class="o">*</span> <span class="n">ms</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret_value</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="cm">/* با فرض این که منفی به معنی خطا باشه */</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ret_value</span> <span class="o">=</span> <span class="n">ms</span><span class="o">-&gt;</span><span class="n">bar</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(...)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret_value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>خوب حالا یک برنامهٔ سی می‌تونه به‌راحتی با لینک کردن به این کتابخونه و
‪<code>#include &lt;foo.h&gt;</code>‬
به‌راحتی از تمام ویژگی‌های کلاس Foo استفاده کنه:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;foo.h&gt;</span>
</span><span class='line'><span class="n">Foo_Type</span><span class="o">*</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Foo_create</span><span class="p">(</span><span class="s">&quot;my foo&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">Foo_bar</span><span class="p">(</span><span class="n">foo</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Thins happen</span>
</span><span class='line'><span class="n">Foo_destroy</span><span class="p">(</span><span class="n">foo</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>فقط برنامه‌نویس C باید حواسش باشه که هدرهای ‪C++‬ رو (که هیچ ربطی به اون ندارن)
وارد برنامه‌ش نکنه. برای این که از این اتفاق جلوگیری کنیم، داخل هدرهای ‪C++‬
مطمئن میشیم که کامپایلر ‪C++‬ در حال اجراست. در غیر این صورت یک خطای زمان
کامپایل صادر می‌کنیم. این‌طوری:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// foo.hpp</span>
</span><span class='line'><span class="cp">#ifndef __cplusplus</span>
</span><span class='line'><span class="cp">#error &quot;This header is a C++ header and it cannot be used via a C compiler.</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>از طرف دیگه یه برنامه‌نویس پایتون (یا هر زبان دیگه‌ای) می‌تونه یک رابط برای این
کد بنویسه، طوری که کاربر نهایی (منظورم برنامه‌نویس پایتون نهایی هست) اصلا متوجه
نشه که برنامه با ‪C++‬ نوشته شده و پایتون داره از رابط Cی اون استفاده می‌کنه:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">ctypes.util</span>
</span><span class='line'>
</span><span class='line'><span class="n">loadName</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">find_library</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">)</span> <span class="c"># ‮ مثلاً ‬‪libfoo.so.1.0.0‬ رو برمی‌گردونه‬</span>
</span><span class='line'><span class="n">lib</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">cdll</span><span class="o">.</span><span class="n">LoadLibrary</span><span class="p">(</span><span class="n">loadName</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">obj</span> <span class="o">=</span> <span class="n">lib</span><span class="o">.</span><span class="n">Foo_create</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__del__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">lib</span><span class="o">.</span><span class="n">Foo_destroy</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">input</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">lib</span><span class="o">.</span><span class="n">Foo_bar</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="nb">input</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>و البته کمی حرفه‌ای‌تر از اینی که من مثال زدم ‪:P‬ نکتهٔ اصلی اینه که تمام این
کارها بدون کوچکترین سرباری انجام میشه و کدهای فراخوانی شده کدهای ماشین هستند.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[پادشاه و استادِ بزرگ]]></title>
    <link href="https://soroush.github.io/blog/the-king-and-the-grandmaster/"/>
    <updated>2014-10-03T00:00:00+03:30</updated>
    <id>https://soroush.github.io/blog/the-king-and-the-grandmaster</id>
    <content type="html"><![CDATA[<p>روزی پادشاهی استادِ بزرگ را نزد خویش فراخواند و به او گفت:</p>

<blockquote><p>ای حکیم دانا!‌ به من چیزی بیاموز که در غمگینی مراخوشحال کرده و دوران خوشی مرا غمگین کند.</p></blockquote>


<p>استادِ بزرگ به وی گفت:</p>

<blockquote><p>ای پادشاه کبیر! هرگاه در چنگال غم و اندوه گرفتار شدی، به‌خاطر بیاور که غمِ دنیا می‌گذرد؛ آن‌گاه شاد خواهی شد. و هرگاه در روزگار بر وفق مراد بود به‌خاطر بیاور که این خوشی پایدار نیست و آنگاه اندوهگین خواهی شد.</p></blockquote>


<p>پادشاه از وی تشکر کرد و استادِ بزرگ رفت. پادشاه از این که به جواب سؤال خود
رسیده بود خوشحال شد. ناگهان حرف استاد را به‌خاطر آورد و ناراحت شد. سپس دوباره
خوشحال شد، دوباره ناراحت شد، در حلقهٔ بینهایت افتاد، مغزش ترکید و مُرد. و
بدین‌ترتیب مردم خوشحال شدند. سپس یاد حرف استاد افتادند و ناراحت شدند، سپس
دوباره خوشحال شدند، بعد در حلقهٔ بینهایت افتادند، مغزشان ترکید و همگی مُردند.</p>

<p>در این میان استادِ بزرگ که از معبد خود در کوه‌های اطرف، شهر را زیر نظر داشت با
خود گفت: «قاعدتاً‌ نباید این‌طوری می‌شد.»</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[توسعهٔ میان‌نسخه‌ای]]></title>
    <link href="https://soroush.github.io/blog/cross-qt-development/"/>
    <updated>2014-09-24T00:00:00+03:30</updated>
    <id>https://soroush.github.io/blog/cross-qt-development</id>
    <content type="html"><![CDATA[<p>سال گذشته توی
<a href="http://onealonebit.wordpress.com/2013/09/10/cross-qt-development">وبلاگ انگلیسی‌م</a>
پستی در مورد توسعهٔ نرم‌افزار بین نسخه‌های مختلف کیوت
نوشته بودم که مدت‌هاست وقت نکردم ترجمه‌ش کنم. این پست در مورد توضیح یک روش
کارامد برای کدنویسی بین
نسخهٔ ۴ و ۵ کیوت هست اما میشه کلیت‌ش رو به تمام چارچوب‌ها و کتابخانه‌هایی که در
یک بازهٔ زمانی چند نسخه دارند، تعمیم داد. برای برنامه‌هایی که به‌طور طولانی‌مدت
پشتیبانی میشن، این شرایط خیلی زیاد پیش میاد.فرض کنید برنامه‌ای نوشته میشه که
قراره با ZMQ نسخهٔ ۲ کار کنه. بعد از گذشت چند سال توسعه‌دهنده‌ها به این نتیجه
می‌رسن که باید نسخهٔ ۳ پشتیبانی بشه و پکیج‌هایی از کدهای کامپایل شده با نسخهٔ ۳
تهیه بشه. بنابراین بهترین راه حل نوشتن کدی هست که با هر دو نسخه کامپایل بشه.
برای ابزارهایی که کتابخانه نیستند هم همین صادق هست. مثلاً اسکریپتی که قراره با
پایتون ۲ کار کنه اما باید با پایتون ۳ هم کار کنه.</p>

<!--more-->


<p>کیوت نسخهٔ پنج نزدیک یک سال پیش منتشر شد. اولین نسخهٔ رسمی فاجعه‌آمیز بود!
۵٫۰٫۱ کمی بهتر بود، ۵٫۱٫۰ به‌قدر کافی خوب بود و ۵٫۱٫۱ پایدار شده بود. در حال
حاضر نسخهٔ ۵٫۳٫۰ را داریم که با وجود نسخهٔ پچ صفرم، به‌قدر کافی پایدار و
بی‌اشکال شده. برای یک توسعهٔ دهندهٔ کیوت، عادت کردن به نسخهٔ جدید زیاد سخت
نیست. یک راهنمای بسیار عالی هم
<a href="http://qt-project.org/wiki/Transition_from_Qt_4.x_to_Qt5">اینجا</a>
برای کسایی که می‌خوان از کیوت نسخهٔ چهار به پنج مهاجرت کنن نوشته شده.</p>

<p>برای من هم اتفاق مشابهی می‌افته&hellip; دیر یا زود مجبور میشم که تمام پروژه‌هام رو
به کیوت پنج ارتقا بدم. خوب پس منتظر چی هستم؟ یه خبر بد اینه که:
<strong>سازگاری عقبگرد کد</strong>
باید حتماً رعایت بشه! این یک مقدار کارم رو سخت خواهد کرد. چون پروژه‌هام
رو روی ویندوز با استفاده از آخرین نسخه‌های پایدار کیوت می‌سازم و روی لینوکس با
استفاده از نسخه‌های مخازن سیستم‌عامل. اکثر توزیع‌های لینوکس همچنان نسخهٔ ۴ رو
به‌عنوان نسخهٔ اصلی کیوت توی مخازن نگه داشتن. و البته دلیلش هم واضحه: حجم بسیار
بزرگ وابستگی بسته‌های دیگه به کیوت. اما توی ویندوز که کلاً چیزی به اسم پکیجینگ
یا مدیریت وابستگی نداریم، دلیلی هم نداره بچسبیم به یه نسخهٔ پایدار. (به شکلی
بسیار ناکارآمد و احمقانه، همیشه تمام پیش‌نیازهای یک برنامه رو بغل‌دستش منتشر
می‌کنیم، و این تقصیر توسعه‌دهنده‌ها نیست. ویندوز مدلش این‌شکلی‌یه!)</p>

<p>خوب پس بهترین راه حل برام تبدیل کد به یک حالت میانی هست که هم با کیوت ۴ کامپایل
و اجرا بشه و هم با کیوت ۵. کسل‌کننده به‌نظر میرسه&hellip; خوب واقعاً هم کسل‌کننده‌ست.</p>

<p>راهکار مشابه <a href="https://soroush.github.io/blog/cross-platform-development">پست قبلی‌م</a>
رو ادامه میدم. پس قانون اول میشه:</p>

<blockquote><p>اگر روشی مثل (W) برای انجام وظیفه‌ای مثل (T) وجود داشته باشد، به‌طوری که هم با نسخهٔ ۴ و هم با نسخهٔ ۵ سازگار باشد، در این صورت از آن استفاده کنید؛ مگر این که پیچیدگی آن روش، بیشتر از مجموع پیچیدگی پیاده‌سازی روش ویژهٔ نسخهٔ چهارم و روش ویژهٔ نسخهٔ پنجم باشد. به بیان ریاضی:</p><p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br/><span class='line-number'>2</span><br/><span class='line-number'>3</span><br/><span class='line-number'>4</span><br/><span class='line-number'>5</span><br/><span class='line-number'>6</span><br/><span class='line-number'>7</span><br/><span class='line-number'>8</span><br/><span class='line-number'>9</span><br/></pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">W</span> <span class="o">&lt;</span> <span class="n">W4</span><span class="o">+</span> <span class="n">W5</span><span class="p">)</span> <span class="p">{</span><br/></span><span class='line'>     <span class="n">T</span><span class="p">.</span><span class="k">do</span><span class="p">(</span><span class="n">W</span><span class="p">);</span><br/></span><span class='line'><span class="p">}</span><br/></span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">W</span> <span class="o">&gt;</span> <span class="n">W4</span> <span class="o">+</span> <span class="n">W5</span><span class="p">)</span> <span class="p">{</span><br/></span><span class='line'>     <span class="k">if</span><span class="p">(</span><span class="n">Qt5</span><span class="p">)</span><br/></span><span class='line'>         <span class="n">T</span><span class="p">.</span><span class="k">do</span><span class="p">(</span><span class="n">W5</span><span class="p">);</span><br/></span><span class='line'>     <span class="k">else</span><br/></span><span class='line'>         <span class="n">T</span><span class="p">.</span><span class="k">do</span><span class="p">(</span><span class="n">W4</span><span class="p">);</span><br/></span><span class='line'><span class="p">}</span><br/></span></code></pre></td></tr></table></div></figure></p></blockquote>


<p>و قانون دوم هم نتیجهٔ بدیهی قانون اول خواهد بود:</p>

<blockquote><p>اگر روش مشترکی برای اجرای کیوت پنج و چهار وجود ندارد، هر دو روش را پیاده‌سازی کرده و زمان کامپایل تصمیم بگیرید که کدام پیاده‌سازی کامپایل شود.</p></blockquote>


<p>اجازه بدید یک مثال از پروژهٔ Qtz بزنم. داخل فایل‌های پروژه من باید مراقب
تغییرات
در سیستم ماژول‌ها باشم. خوشبختانه ماکروهایی برای تشخیص نسخهٔ کیوت وجود دارند.
حتا بهتر از آن متغیرهای شرطی برای اندازه‌گیری عدد نسخه.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>QT += core gui sql
</span><span class='line'>greaterThan(QT_MAJOR_VERSION, 4): QT += widgets
</span><span class='line'>greaterThan(QT_MAJOR_VERSION, 4): CONFIG   += C++11
</span><span class='line'>lessThan(QT_MAJOR_VERSION, 5): QMAKE_CXXFLAGS += -std=c++11</span></code></pre></td></tr></table></div></figure>


<p>و همین قاعده روی کدها هم تأثیر می‌ذاره:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CandleGraphicsItem</span><span class="o">::</span><span class="n">CandleGraphicsItem</span><span class="p">(</span><span class="k">const</span> <span class="n">Candle</span><span class="o">&amp;</span> <span class="n">candle</span><span class="p">,</span> <span class="n">QGraphicsItem</span>
</span><span class='line'><span class="o">*</span><span class="n">parent</span><span class="p">)</span>
</span><span class='line'>    <span class="o">:</span><span class="n">QGraphicsItem</span><span class="p">(</span><span class="n">parent</span><span class="p">),</span> <span class="n">candle_</span><span class="p">(</span><span class="n">candle</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#if QT_VERSION &gt;= 0x050000</span>
</span><span class='line'>    <span class="n">setAcceptHoverEvents</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>    <span class="n">setAcceptsHoverEvents</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">setY</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="n">candle</span><span class="p">.</span><span class="n">low_</span><span class="o">+</span><span class="n">candle</span><span class="p">.</span><span class="n">high_</span><span class="p">)</span><span class="o">/</span><span class="mf">2.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>با استفاده از ماکروی
<a href="http://qt-project.org/doc/qt-5/qtglobal.html#QT_VERSION">QT_VERSION</a>
از هدر <QtGlobal> می‌تونید به‌راحتی نسخهٔ کیوت رو تشخیص بدید که این خیلی خوبه
(:
حالا من می‌تونم نرم‌افزارم رو روی کیوت‌های ۴٫۶ تا ۵٫۳ کامپایل کنم.</p>

<p>برای جزئیات بیشتر <a href="http://www.kdab.com/porting-from-qt-4-to-qt-5/">این مقاله</a>
از
بچه‌های KDAB رو بخونید. اون‌ها همچنین یک
<a href="http://www.kdab.com/automated-porting-from-qt-4-to-qt-5/">اسکریپت</a> برای تبدیل
اتوماتیک کدها از کیوت ۴ به کیوت ۵ نوشتن.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[چپ‌به‌راست، راست‌به‌چپ و Unicode BiDi]]></title>
    <link href="https://soroush.github.io/blog/unicode-bidi/"/>
    <updated>2014-09-18T00:00:00+04:30</updated>
    <id>https://soroush.github.io/blog/unicode-bidi</id>
    <content type="html"><![CDATA[<p>حتماً تا به‌حال براتون پیش اومده که وسط یه متن فارسی، یک متن انگلیسی می‌نویسید
و همه‌چیز قاطی میشه. مخصوصاً توی محیط‌های
<a href="http://en.wikipedia.org/wiki/Plain_text">Plain Text</a>
(یعنی محیط‌های متنی‌ای که شما کنترلی روی استایل و پاراگراف ندارید. مثل
<a href="http://en.wikipedia.org/wiki/Gedit">gedit</a>
یا
<a href="http://en.wikipedia.org/wiki/Kate_%28text_editor%29">kate</a>
یا مثلاً
<a href="http://en.wikipedia.org/wiki/Notepad_%28software%29">notepad</a>).
خیلی زود متوجه خواهید شد که روش ساده‌ای برای نوشتن کاراکترهایی که نه راست‌به‌چپ
هستن و نه چپ‌به‌راست هستن، وجود نداره (در ادامه میگم که جهت یک کاراکتر یعنی
چی). توی این پست می‌خوام روش استاندارد نوشتن متون دوطرفه رو معرفی کنم، و تأکید
کنم که <strong>حتماً</strong> ازش استفاده کنید و هیچوقت به‌جای این‌کار از هک‌های متداول (مثل
برعکس نوشتن ترتیب نویسه‌ها) استفاده نکنید چون این کار خیلی غلطه.</p>

<!--more-->


<p>نویسه‌های یونیکد از لحاظ جهت‌گیری به چهار دستهٔ خنثی، راست‌به‌چپ، چپ‌به‌راست و
ضعیف تقسیم‌بندی میشن. نویسه‌های چپ‌به‌راست نویسه‌هایی هستند که همیشه باید
چپ‌به‌راست نمایش داده بشن. مثل حروف الفبای لاتین. نویسه‌های راست‌به‌چپ هم
دقیقاً برعکس این‌ها هستند. مثل حروف الفبای عربی. یک دسته از نویسه‌ها هم هستند
که جهت براشون معنی نداره. مثلاً نویسهٔ نوسطر یا نویسه‌هایی که دیده نمیشن (مثل
نویسه‌های کنترلی) این‌ها نویسه‌های خنثی هستند. خوب تا این‌جا همه‌چیز خوب بود
اما وقتی مشکل بزرگ به‌وجود میاد که به نویسه‌های ضعیف برخورد می‌کنیم. نویسهٔ
ضعیف نویسه‌ای‌یه که براساس جاگیری‌ش بین نویسه‌های دیگه می‌تونه راست‌به‌چپ یا
چپ‌به‌راست باشه. مثل نویسهٔ + یا مثلاً ™.</p>

<p>خوب این نویسه‌های ضعیف متن رو خراب می‌کنن. چینش‌هایی از متن دوطرف وجود داره که
از لحاظ منطقی الگوریتمی برای تعیین جهت یک سری نویسهٔ ضعیف توشون وجود نداره.
مثلاً چطور؟ فرض کنید وسط یک متن فارسی بنویسم C++. همون‌طور که می‌بینید دو تا +
رفتن به سمت چپ نویسهٔ C در حالی که منظور من اومدن اون‌ها به سمت راست بوده. در
واقع من اول کلید C رو زدم، بعد دو بار کلید + رو فشار دادم. اما اگر جهت متن رو
عوض کنم، یعنی توی این کد HTML یه تگ dir=ltr بنویسم، اونوقت نوشته‌های فارسی‌م در
جهت‌های معکوس نشون داده میشن. برای این که مشکل رو ببینید می‌تونید این ویدئو رو
ببینید (اگر به هر دلیلی اینترنت آزاد ندارید، می‌تونید از
<a href="http://www.aparat.com/v/QrLS7">این‌جا</a>
ببینید):</p>

<iframe width="800" height="600"
src="http://www.youtube.com/embed/fBCKBA2P3vU">
</iframe>


<p>همون‌طور که گفتم الگوریتمی برای اصلاح خودکار جهت‌ها نمی‌تونه وجود داشته باشه.
چون کاربر ممکنه هرکدوم از حالت‌ها مدنظرش باشه. برای اصلاح جهت‌ها یک سری
نویسه‌های کنترلی وجود داره. (نویسه‌هایی که شما اون‌ها رو نمی‌بینید ولی مثل یک
کاراکتر معمولی هستند). با استفاده از این نویسه‌ها میشه خیلی راحت متن رو تنظیم
کرد. طوری که متون راست‌به‌چپ وسط متون چپ‌به‌راست قاطی نشن و برعکس.</p>

<p>برای استفاده از این نویسه‌ها کافیه که متن خودتون رو بین یک جفت نویسهٔ کنترلی
قرار بدید. برای این کار روش‌های مختلفی وجود داره. راحت‌ترین روش استفاده از
صفحه‌کلید استاندارد فارسی هست که آخر از همه میگم چطوریه (: اول باید توضیح بدم
که چطور کار می‌کنه.</p>

<h2>طرز کار</h2>

<p>۱. اگر می‌خواهید وسط یک متن راست‌به‌چپ، یک متن چپ‌به‌راست بنویسید، یک نویسهٔ
Left-to-Right Embedding
(کد <code>U+202A</code>) قبل از متن چپ‌به‌راست و یک نویسهٔ
Pop Directional Format
(کد <code>U+202C</code>) بعد از متن چپ‌به‌راست قرار بدید.</p>

<p>۲. اگر می‌خواهید وسط یک متن راست‌به‌چپ، یک متن چپ‌به‌راست بنویسید، یک نویسهٔ
Right-to-Left Embedding
(کد <code>U+202B</code>) قبل از متن چپ‌به‌راست و یک نویسهٔ
Pop Directional Format
(کد <code>U+202C</code>) بعد از متن چپ‌به‌راست قرار بدید.</p>

<p>مثلاً عبارت <strong>من ‪C++‬ هستم</strong> به این صورت توی حافظه ذخیره میشه:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mh">0xd985</span> <span class="c1">// ARABIC LETTER MEEM</span>
</span><span class='line'><span class="mh">0xd986</span> <span class="c1">// ARABIC LETTER NOON</span>
</span><span class='line'><span class="mh">0x0020</span> <span class="c1">// SPACE</span>
</span><span class='line'><span class="mh">0x8207</span> <span class="c1">// LETF-TO-RIGHT EMBEDDING</span>
</span><span class='line'><span class="mh">0x0067</span> <span class="c1">// C</span>
</span><span class='line'><span class="mh">0x0043</span> <span class="c1">// +</span>
</span><span class='line'><span class="mh">0x0043</span> <span class="c1">// +</span>
</span><span class='line'><span class="mh">0x8236</span> <span class="c1">// POP-DIRECTIONAL FORMAT</span>
</span><span class='line'><span class="mh">0x0020</span> <span class="c1">// SPACE</span>
</span><span class='line'><span class="mh">0xd987</span> <span class="c1">// ARABIC LETTER HEH</span>
</span><span class='line'><span class="mh">0xd8b3</span> <span class="c1">//ARABIC LETTER SEEN</span>
</span><span class='line'><span class="mh">0xd8aa</span> <span class="c1">//ARABIC LETTER TEH</span>
</span><span class='line'><span class="mh">0xd985</span> <span class="c1">// ARABIC LETTER MEEM</span>
</span></code></pre></td></tr></table></div></figure>


<h2>تایپ کردن</h2>

<p>اگر صفحه‌کلید استاندارد فارسی استفاده می‌کنید کارتون خیلی راحته. (اگر کاربر یکی
از توزیع‌های گنو/لینوکس باشید، صفحه‌کلید پیش‌فرض‌تون همین چینش صفحه‌کلید
استاندارد خواهد بود.)</p>

<ul>
<li>برای درج نویسهٔ RLE از کلید <code>Alt</code> سمت راست به‌همراه ‪<code>]</code>‬ (<code>چ</code> فارسی)
استفاده کنید.</li>
<li>برای درج نویسهٔ LRE از کلید <code>Alt</code> سمت راست به‌همراه ‪<code>[</code>‬ (<code>ج</code> فارسی) استفاده
کنید</li>
<li>برای درج نویسهٔ PDF از کلید <code>Alt</code> سمت راست به‌همراه ‪<code>P</code>‬ (<code>ح</code> فارسی) استفاده
کنید</li>
</ul>


<p>به همین راحتی! به یاد داشتن جای این کلیدها هم خیلی آسونه:</p>

<p><img class="center" src="https://soroush.github.io/images/posts/unicode-bidi/kb-right-shift.jpg" title="چینش استاندارد فارسی" ></p>

<p>می‌تونید ویدئوی مربوط به تایپ کردن صحیح رو هم این‌جا ببنید:
(بازم اگر به هر دلیلی اینترنت آزاد ندارید، می‌تونید از
<a href="http://www.aparat.com/v/n4vbK">این‌جا</a>
ببینید)</p>

<iframe width="800" height="600"
src="http://www.youtube.com/embed/yegh4mQZG5E">
</iframe>


<p>اگر کاربر ویندوز هستید بهتره ویندوز رو پاک کنید و یه سیستم‌عامل آزاد نصب کنید.
اگر رئیس‌تون این اجازه رو نمیده، می‌تونید
<a href="http://wiki.persian-computing.org/wiki/Main_Page">چینش استاندارد فارسی برای ویندوز</a>
رو نصب کنید و البته فراموش نکنید که چینش احمقانهٔ من‌درآورُدیِ مایکروسافت رو هم غیرفعال کنید.</p>

<h2>کدهای HTML</h2>

<p>معمولاً توسعه‌دهنده‌های وب گرامی وقتی می‌خوان یک متنی با جهت مخالف رو بین یک
متن دیگه قرار بدن، دو تا کار انجام میدن. یا کلاً بی‌خیال قضیه میشن و همه‌چیز به
شکلی زشت و آزاردهنده دیده میشه، یا اینکه هک خودشون رو اختراع می‌کنن. در این
مورد استفاده از تگ‌های <code>&lt;span&gt;</code> و بازنویسی جهت استفاده میشه. این خیلی بده. وقتی
توی یک صفحهٔ HTML قرار باشه از متون دوجهته استفاده بشه، <strong>باید</strong> از همین روش
بالا استفاده کنید. کدهای HTML برای نویسه‌های کنترلی این‌طوری هستند:</p>

<ul>
<li>برای درج نویسهٔ RLE از کد ‪<code>&amp;#8207;</code>‬ و یا بهتر از اون ‪<code>&amp;rlm;</code>‬ استفاده کنید.</li>
<li>برای درج نویسهٔ LRE از کد ‪<code>&amp;#8206;</code>‬ و یا بهتر از اون ‪<code>&amp;lrm;</code>‬ استفاده کنید.</li>
<li>برای درج نویسهٔ PDF از کد ‪<code>&amp;#8236;</code>‬ استفاده کنید.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[توسعهٔ چندسکویی]]></title>
    <link href="https://soroush.github.io/blog/cross-platform-development/"/>
    <updated>2014-09-18T00:00:00+04:30</updated>
    <id>https://soroush.github.io/blog/cross-platform-development</id>
    <content type="html"><![CDATA[<p>دوست دارم برنامه‌ها و کتابخونه‌هام روی پلتفرم‌های مختلف اجرا بشن. هرچه بیشتر
بهتر! البته همیشه هدف اصلی همیشه
<a href="http://en.wikipedia.org/wiki/Linux">لینوکس</a>
و <a href="http://en.wikipedia.org/wiki/Unix-like">سیستم‌های شبه‌یونیکس</a> هستند. با این
حال بدم نمیاد که عملکرد مشابهی رو برای ویندوز و اندرویید، شاید هم مک‌اواس فراهم
کنم. در واقع <strong>پلتفرم</strong> نباید یک محدودیت برای استفاده از نرم‌افزار باشه. مجموع
این‌ها ما رو به ایدهٔ
<a href="http://en.wikipedia.org/wiki/Cross-platform">توسعهٔ چندسکویی</a>
می‌رسونه. متأسفانه این کار چندان ساده هم نیست. استاندارد پذیرفته‌شده‌ای برای
APIهای
سیستم‌عامل‌ها وجود نداره. همچنین هیچ الگوی کلی‌ای برای عملیات سیستم‌عامل
موجود نیست. توسعه‌دهنده‌ها باید با درنظر داشتن تمام نیازمندی‌های چندسکویی کد
بنویسند.</p>

<p>توی این پست، تجربهٔ شخصی خودم رو در مورد توسعهٔ چندسکویی پروژهٔ AIT می‌نویسم.
توی اون پروژه به مشکلات زیادی برخوردم و تعدادی‌شون رو حل کردم. این نوشته یک
چک‌لیست ساده برای کسایی که می‌خوان توسعهٔ چندسکویی انجام بدن فراهم می‌کنه که
بتونن از مشکلات توسعهٔ چندسکویی با زبان‌های ‏‪C/C++‬ پیشگیری کنن. رفتیم که بریم :)</p>

<!--more-->


<h2>زبان</h2>

<blockquote><p>Ⅰ. با یک زبان ویژهٔ پلتفرم کد ننویسید.</p></blockquote>


<p>این کار رو نکنید. با C#، C++ CLI یا ابزارهای دیگهٔ مایکروسافت کد ننویسید.
<img class="center" src="https://soroush.github.io/images/posts/cross-platform-development/c++.png" title="C++ به‌قدر کافی چندسکویی است. چون برای تمام پلتفرم‌ها کامپایلر دارد (حداقل پلتفرم‌های درست و حسابی)" ></p>

<h2>کد</h2>

<blockquote><p>Ⅱ. کد وابسته به یک پلتفرم خاص ننویسید. حتا اگر شده به قیمت اضافه کردن وابستگی‌های بیشتر.</p></blockquote>


<p>قانون شمارهٔ دو میگه که نرم‌افزار شما نباید وابسته به ابزارهای ویژهٔ پلتفرم خاصی
باشه. این به معنی هست که مثلاً از
<a href="http://en.wikipedia.org/wiki/Berkeley_sockets">Berkeley socket API</a>
توی سیستم‌های یونیکس استفاده نکنید. همچنین از
<a href="http://en.wikipedia.org/wiki/Winsock">Winsock</a>
روی ویندوز. به‌جای استفاده از این APIها یک پیش‌نیاز جدید اضافه کنید که کاربرد
موردنظر رو به شکل چندسکویی پیاده‌سازی کرده باشه. مثلاً
<a href="http://en.wikipedia.org/wiki/Asio_C%2B%2B_library">Boost ASIO</a>
برای کارهای شبکه می‌تونه یه راهکار چندسکویی باشه. ASIO خودش چندسکویی‌یه بنابراین
کدی که ازش استفاده می‌کنه نیازی به تغییر روی سکوها نداره.</p>

<p>درصورتی که بخواید یک API سطح سیستم‌عامل بنویسید، باید پیاده‌سازی مربوط به هر
پلتفرم رو بنویسید و بعد با استفاده از تعریف‌های شرطی زمان کامپایل زمان کامپایل
مشخص کنید که کدوم کامپایل بشه. مثل این:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">delay</span><span class="p">(</span><span class="kt">int</span> <span class="n">ms</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifdefined(OS_WIN32)</span>
</span><span class='line'>              <span class="n">Sleep</span><span class="p">(</span><span class="n">ms</span><span class="p">);</span>
</span><span class='line'><span class="cp">#elifdefined(OS_LINUX)</span>
</span><span class='line'>             <span class="n">usleep</span><span class="p">(</span><span class="n">ms</span><span class="o">*</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>در صورتی که روش استاندارد مشترکی برای انجام کاری روی پلتفرمی وجود داشته باشه،
توسعه‌دهنده باید به‌جای انجام فراخوانی سیستمی از اون روش استفاده کنه. کد بالا
می‌تونه با این کد جایگزین بشه:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">delay</span><span class="p">(</span><span class="kt">int</span> <span class="n">ms</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// تضمین میشه که به‌خوبی روی هر سکویی که کامپایل میشه کار کنه!</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="n">ms</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>البته تأخیر دومی نیازمند C++11 هست. شاید بعد از سال ۲۰۱۵ توسعه‌دهنده‌های
مایکروسافت تصمیم بگیرن که سویت کامپایلرشون یه سویت به‌دردنخورِ مزخرفِ ازرده‌خارج
نباشه و شاید موفق بشن استاندارد ۲۰۱۱ رو به‌طور کامل پیاده‌سازی کنن.</p>

<h2>سیستم ساخت (Build System)</h2>

<blockquote><p>Ⅲ. نباید از یک بیلدسیستم مختص پلتفرمی خاص استفاده کنید. در صورت عدم وجود سیستم ساخت مستقل از پلتفرم، از چند سیستم ساخت استفاده کنید.</p></blockquote>


<p>پلتفرم‌های مختلف از سیستم‌های ساخت متفاوت استفاده می‌کنند. سیستم‌های ساخت متداول عبارتند از
GNU Make
و
Microsoft NMake.
تعداد زیادی نرم‌افزار برای تولید سیستم‌ساخت وجود دارد از جمله
GNU Autohell, CMake, QMake و Microsoft Visual Studio.
ابزارهای گنو شاید روی ویندوز شهروند درجهٔ یک شمرده نشوند. برای همین ممکن است
بخواهید از MSVC استفاده کنید. معمولاً سیستم‌های ساخت با همدیگر تداخل پیدا
نمی‌کنند. شما می‌توانید فایل‌های Autohell را داخل دایرکتوری کد داشته باشید و در
عین حال فایل‌های مربوط به Solution و QMake. با این همه بهتر است از یک سیستم
چندسکویی مثل CMake استفاده کنید.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[زیکانف‌نامه]]></title>
    <link href="https://soroush.github.io/blog/zconfination/"/>
    <updated>2014-09-17T00:00:00+04:30</updated>
    <id>https://soroush.github.io/blog/zconfination</id>
    <content type="html"><![CDATA[<p>خوب دو هفته‌ای از برگزاری همایش سراسری نرم‌افزارهای آزاد/متن‌باز (زیکانف)
می‌گذره و من هنوز هیچ پستی در مورد این که چقدر خوش گذشت و چه کارهایی کردیم،
ننوشتم.</p>

<p>امسال اولین سالی بود که شرکت می‌کردم. سال قبل می‌خواستم برم اما به دو دلیل
منصرف شدم، یک اینکه تنها بودم و تنهایی زیاد خوش نمی‌گذره، دومی هم احتمالاً به
خاطر روباتیک بوده که نرفتم. همچنین امسال برای اولین بار مقاله ارائه دادم، و در
کمال تعجب مقاله‌م برای ارائه انتخاب شد و باز هم در کمال تعجب تو رده‌بندی سوم
شدم و این خیلی خوبه (:</p>

<p>به نظر من کنفرانس خیلی خوبی بود. کلی چیزهای جدید یاد گرفتم و با کلی آدم‌های خوب
آشنا شدم. بعدش هم تو توئیتر کلی از این آدم‌های خوب رو فالو کردم و میشه گفت عضوی
از یه جامعهٔ قشنگ شدم. (باید فعالیت‌های اجتماعی‌م رو بیشتر کنم)</p>

<!--more-->


<h1>زنجان</h1>

<p>من و مهدی  با هم رفتیم. فکر می‌کردیم از ارومیه فقط ما دو تا هستیم، اما اونجا یه
آدم یزدی، یه ارومیه‌ای دیگه رو به ما معرفی کرد D: از ارومیه تا زنجان شش ساعت
راهه. اتوبوس مستقیم هم نداریم. بنابراین با اتوبوس تهران راهی زنجان شدیم تا توی
سه‌راه پیاده بشیم و تا خود زنجان با تاکسی بریم. محل برگزاری همایش یه مجموعهٔ
فرهنگی بود که خوابگاه‌ها هم بغل همون‌جا بودن. منتها ما چون دیر رسیدیم، خوابگاه
بهمون نرسید و خوابگاه‌های دورتری رو بهمون دادن. خوابگاه خوبی بود و تر و تمیز
بود نسبتاً.</p>

<h1>ارائه‌ها</h1>

<p>موضوعات ارائه‌ها اکثراً جالب بودند.
<a href="https://twitter.com/hedayatvk">هدایت وطن‌خواه</a> در مورد
<a href="http://en.wikipedia.org/wiki/Systemd">systemd</a>
ارائه داد که خیلی به دردم خورد. وقتی به ارومیه برگشتم اولین کاری که کردم کانفیگ
و نصب
systemd
روی بیگل‌بورد بود.</p>

<p>ارائهٔ <a href="https://twitter.com/majidazimi">مجید عظیمی</a> هم در مورد پایگاه‌داده‌ها و
این که کی از کدومشون استفاده کنیم بود. اونم خیلی به‌دردبخور و جالب بود. احتمالش
زیاده که توی پروژهٔ پلاک ماشین‌ها به دردم بخوره. چون خودش هم کار مشابهی انجام
داده بود.</p>

<p>ارائهٔ <a href="https://twitter.com/SMortezaH">مرتضی حسینی</a> در مورد
<a href="https://travis-ci.org/soroush">Travis CI</a>
ارائهٔ خیلی خوبی بود. قبلاً با Travis آشنا بودم و دو سه تا پروژه دارم روش.
منتهی این‌ها کار نمی‌کنن چون اوبونتوی Travis همچنان رو نسخهٔ دو سال پیش هست و
پکیج‌ها خیلی آپدیت شدن. یکی از پروژه‌هام هم رم کم میاره.</p>

<h1>ارائه‌م</h1>

<p>موضوع ارائه‌م «سخت‌افزارهای متن‌باز» بود. موضوع اصلی این بود که می‌خواستم ایدهٔ
سخت‌افزارهای متن‌باز، این که چرا مهم هستن و این که چرا <strong>باید</strong> سخت‌افزار
متن‌باز
داشته باشیم رو مطرح کنم. و از همه مهم‌تر روی این حقیقت که «نرم‌افزارهای آزاد،
روی سخت‌افزارهای غیرآزاد، هیچ آزادی‌ای را به ارمغان نمی‌آورند» تأکید کنم که فکر
می‌کنم به‌طور نصفه و نیمه ایده‌م رو مطرح کردم.</p>

<p>اول ارائه خیلی سخت بود چون وقتی رفتم بالا دیدم همه خوابیدن. با خودم گفتم شاید
موضوع خوبی انتخاب نکردم شایدم هیچ جذابیتی برای کسی نداره. در طول ارائه هم
کم‌انرژی و منفعل‌تر از حالت معمولی‌م بودم! یه ایرادی هم که داشتم این بود که همش
از خودم جلو می‌افتادم توی ارائه. اسلایدها رو یادم می‌رفت جلو بزنم. البته اون
میکروفون باعث این وضعیت مسخره شده بود چون عادت ندارم رو دو تا چیز تمرکز کنم و
البته در نهایت هم باعث شد که شارژر لپ‌تاپ رو جا بذارم، که روز بعدش
<a href="http://fzero.rubi.gd/">fzerorubigd</a>
(از داوران کنفرانس) بهم داد.
<img class="center" src="https://soroush.github.io/images/posts/zconf5/me-in-zconf.jpg" title="من در زیکانف" ></p>

<p>جالبش اینجا بود که من اصلا خبر نداشتم ارائه‌ها اول، دوم، سوم دارن (: فکر
می‌کردم همین‌طوری دور همی‌یه&hellip; اصلا قرار هم نبود روز اختتامیه بمونیم. بعد مهدی
گفتش که بریم اختتامیه، شب برگردیم ارومیه. رفتیم و منم لباس پلوخوری‌هامو نپوشیدم
:D این‌طوری شد که با اون تی‌شرت زرشکی‌یه رفتم، صدام کردن روی سن (امیدوارم کسی
ندیده باشه)</p>

<h2>ماگ‌م</h2>

<p>به‌عنوان خاطره یه ماگ قشنگ (از اونا که توش چیز داغ می‌ریزی رنگی‌رنگی میشه) بهمون
دادن به همراه یه تی‌شرت و تقدیرنامه و این‌چیزا که از بین این همه ماگ‌مو بیشتر از
همه دوست دارم. چون ماگ بارسلونام (که از اینا نبود که وقتی توش چیز داغ می‌ریزی
رنگی‌رنگی بشه) کمی قبل شکسته بود.
<img class="center" src="https://soroush.github.io/images/posts/zconf5/my-mug.jpg" title="ماگم" ></p>

<h1>مشکلات اینترنت</h1>

<p>تو سالن همایش اینترنت وصل نمی‌شد (به دلیلی نامعلوم) یعنی همه وصل بودن اما
لپ‌تاپ من آی‌پی نمی‌گرفت. حتا گوشیم وصل می‌شد اما لپ‌تاپ آی‌پی نگرفت که نگرفت.
لحظاتی چند وصل بودم البته. خوابگاه هم اینترنت نداشت که باعث شد حسابی اینترنت
خونم بیاد پایین.
<img class="center" src="https://soroush.github.io/images/posts/zconf5/no-internet.jpg" title="مکان‌یابی جالب برای اکسس‌پوینت‌ها" ></p>

<h1>منوپاد (سیخچهٔ سلفی)</h1>

<p>از جمله نکات ارزندهٔ زیکانف بود. باید یکی بخرم:
<img class="center" src="https://soroush.github.io/images/posts/zconf5/monopod_2013.jpg" title="سیخچهٔ سلفی" >
و البته تا زمانی که بخرمش باید به سلفی‌های عادی بسنده کنم. مثل اینیکی:
<img class="center" src="https://soroush.github.io/images/posts/zconf5/le_me.jpg" title="سلفی" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[چرا طراحی وب را دوست ندارم]]></title>
    <link href="https://soroush.github.io/blog/why-do-I-hate-web-devel/"/>
    <updated>2014-09-17T00:00:00+04:30</updated>
    <id>https://soroush.github.io/blog/why-do-I-hate-web-devel</id>
    <content type="html"><![CDATA[<p>ترجیح میدم برنامه‌نویسی وب انجام بدم تا کار طراحی ظاهر و گرافیک این‌جور چیزها.
دلیل این وضعیت هم دو تا چیز هست:</p>

<p>۱. طراحی وب کار اعصاب‌خوردکن و بی‌حساب و کتابی هست. هیچ قاعده‌مندی برای طرز کار
CSS
یا اسکریپت‌های عجیب و غریب وجود نداره. هر مرورگری هرچی دلش خواست پشتیبانی
می‌کنه و مثلاً شما به‌عنوان طراح وب مجبور هستید هزینهٔ حماقت مهندسین مایکروسافت
رو با زحمت ده برابر بپردازید.</p>

<p>۲. طراحی وب نیازمند دانش گرافیک هست و هیچ منطق خاصی پشتش نیست. شما باید آدم با
سلیقه‌ای باشید و بدونید چی به چی میاد. هچنین باید هزار و یک تا تکنیک حفظ کنید.
هیچ idiom یا الگوریتم خاصی به شما کمکی نخواهد کرد.</p>

<p>به‌طور خاص اگر بخوام غر بزنم، باید بگم که وب خوب نیست، چون بیماره. بیماری‌ش
طراحی بسیار بد پروتکل‌ها و ابزارها هستند. که البته زمان خودشون (برای نیازهای
خودشون خوب بودن بیچاره‌ها) مثلاً همین
HTML
رو در نظر بگیرید. این پروتکل به‌شدت
Stateless
هست. و صرفاً برای این که داینامیک‌ش کنن، اومدن کلی ژانگلولربازی درآوردن از جمله
پیدایش چیزی به‌نام
Flash
و بدتر از اون چیزهای پیچیده‌تر و احمقانه‌تری مثل
Silverlight
و یا حتا
JavaScript و رفقا.</p>

<p>در کنار همهٔ این‌ها متأسفانه وب به شکل عمیقی تو زندگی ما فرو رفته (: بنابراین
مجبور هستیم یا توسعه‌دهندهٔ وب متوسط (به‌زور هم که شده) بشیم (بکنونیم خودمونو)
یا کلاً آف‌تاپیک بمونیم. از اونجایی که دلم نمی‌خواد آف‌تاپیک باشم، پس میرم که
یاد بگیرم که وب‌دولوپر باشم.</p>

<p>از بین این همه زبان و پروتکل و چیزهای عجیب‌غریب، تصمیم گرفتم با Ruby on Rails
شروع کنم و یه چیز کوچولو درست کنم. تا ببینیم بعدها چه شود&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[توسعهٔ وب از دید یک گیگتوپوس]]></title>
    <link href="https://soroush.github.io/blog/web-development-like-a-boss/"/>
    <updated>2014-03-25T00:00:00+04:30</updated>
    <id>https://soroush.github.io/blog/web-development-like-a-boss</id>
    <content type="html"><![CDATA[<p>به‌دلایلی مجبور هستم سایت شرکتمون رو خودم طراحی کنم. همیشه از طراحی وب بدم
می‌اومده. و این کار برام چندان آسون نیست. به نظر من روش‌ها و ابزارهایی که اکثر
توسعه‌دهنده‌های وب ایرانی استفاده می‌کنن مشکلاتی داره. سعی کردم این مشکلات رو حل
کنم و در آخر کار به‌جایی رسیدم که از سبک کاری متداول دیگه استفاده نمی‌کنم و روش
خودم رو ابداع کردم :) اما روش متداول چیه؟ خوب معلومه! بدترین کارهای ممکن و تحمیل
بار روی پردازش، زمان و مخصوصاً ترافیک. یک طراح وب معمولاً این‌طوری کار می‌کنه:</p>

<p>۱. هیچ خبری از گیت نیست. مدیریت نسخه‌ها و پیشرفت پروژه دستی انجام میشه.</br>
۲. برای ارسال و دریافت فایل‌ها روی سرور از cpanel یا اینترفیس‌های تحت وب دیگه‌ای
استفاده میشه. (اگر طراح خیلی حرفه‌ای باشه از FileZilla یا چیزهای مشابه :D )</br>
۳. برای مدیریت پایگاه داده (که معمولاً MySQL هست) از رابط‌های پرهزینه مثل
phpMyAdmin
استفاده میشه.</br>
۴. کارایی و سرعت مدنظر گرفته نمیشن. (چون به نظر ایشون قابل چشم‌پوشی هستند.)</p>

<p>سبک کاری توسعه‌دهنده‌های وب دو تا ایراد اساسی داره. اول این که با هر تغییر کوچکی
توی فایل‌هاشون، کل اون فایل رو دوباره آپلود می‌کنن. با این کار پهنای باند زیادی
هدر میره. دوم این که برای قابل فهم بودن کد اون رو توسط IDE به شکل کامل و شکیل
indent
می‌کنن. یعنی هرجایی که لازم باشه، به هر اندازه‌ای که با استفاده از تب یا فاصله
تورفتگی ایجاد می‌کنن، و این کار خوبه ولی هدررفت حجم خیلی زیادی رو داره.</p>

<p>ایدهٔ کلی من برای توسعهٔ وب مشابه کاری هست که با گیت برای پروژه‌های واقعی انجام
میدم:</p>

<p>۱. توسعه بده.</br>
۲. تغییرات رو (دقت کنید! فقط تغییرات رو) بفرست روی سرور.</br></p>

<p>بعد از یک روز کاری تونستم تمام روال‌های مربوطه رو اتوماتیک کنم و براش یه برنامه
نوشتم. این پست در مورد این برنامه و نحوهٔ استفاده از اون هست.</p>

<!-- more -->


<h2>صورت‌مسأله</h2>

<p>ایدهٔ اصلی اینه که برنامه‌ای داشته باشیم که برای یک وبسایت (که داریم طراحی‌ش
می‌کنیم) کارهای زیر رو انجام میده:</br>
۱. یک رپوزیتوری گیت روی سرور و یکی هم توی دایرکتوری محلی ایجاد می‌کنه.</br>
۲. با هر بار تغییر تمام فایل‌ها رو فشرده می‌کنه (الان میگم فشرده‌سازی یعنی چی) و
با استفاده از گیت، تغییرات
ایجاد شده رو می‌فرسته به سرور.</br>
۳. تمام تغییرات مربوط به فشرده‌سازی رو به حالت عادی برمی‌گردونه.</br></p>

<p>برنامه‌ای می‌خوایم که تمام موارد ۱ تا ۳ مذکور در بالا رو برای تمام فایل‌های
سایتمون انجام بده.</p>

<h2>گیت روی FTP</h2>

<p>هدف اینه که از گیت برای مدیریت پروژه استفاده کنیم و خود سایت نهایی (فایل‌های روی
سرور) رو هم رپوزیتوری مقصد درنظر بگیریم. متأسفانه سرویس‌های هاستینگ برنامهٔ گیت
رو نصب نمی‌کنن و به ما هم اجازه نمیدن که برنامه‌ای رو نصب کنیم. و خوشبختانه گیت
می‌تونه روی
FTP
اجرا بشه! یعنی بدون نیاز به وجود برنامهٔ گیت روی سرور مقصد، شما تنها با استفاده
از پروتکل FTP می‌تونید از کل امکانات گیت استفاده کنید. برای این کار باید از
اسکریپت
<a href="https://github.com/git-ftp/git-ftp">git-ftp</a>
استفاده کنید. برای نصب این اسکریپت روی اوبونتو کافیه مراحل زیر رو انجام بدیم:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo add-apt-repository ppa:resmo/git-ftp
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install git-ftp
</span></code></pre></td></tr></table></div></figure>


<p>باقی مراحل دقیقاً مشابه رپوزیتوری‌های عادی گیت هست. تنها تفاوتی که داره موقع
ارسال تغییرات به سرور، به‌جای push از ftp push استفاده می‌کنیم:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git init
</span><span class='line'><span class="c"># do changes</span>
</span><span class='line'>git ftp push --user username --passwd secret 123.124.125.126
</span></code></pre></td></tr></table></div></figure>


<p>دستور ftp push سینتکس خیلی ساده‌ای داره. کافیه یوزرنیم و پسورد اکانت FTP رو وارد
کنیم و در آخر آی‌پی مقصد رو بهش بدیم.</p>

<h2>فشرده‌سازی؟</h2>

<p>فشرده‌سازی یعنی چی؟ یعنی این که تمام فاصله‌های اضافی، نوسطرها و توضیحات رو از یک
فایل حذف کنیم. طوری که برای کامپیوترها قابل فهم باشه ولی برای انسان‌ها نه :) با
دو تا عکس تفاوت رو نشون میدم. تصویر اول یک صفحهٔ HTML رو توی کامپیوتر من نشون
میده که توش تعداد زیادی فاصله و خط‌های اضافی وجود داره. این باعث میشه بفهمم چی
به چیه و بتونم کدهایی رو که نوشتم بخونم:
<img class="center" src="https://soroush.github.io/images/posts/web-devel/expanded.png" title="یک صفحهٔ گسترده" >
تصویر دوم سورس همون صفحه رو که از روی سایت اصلی توی کروم باز کردم نشون میده.
همون‌طور که می‌بینید هیچ چیز اضافه‌ای توی کدها وجود نداره و کل صفحه عبارت است از
یک خط طولانی که هیچ جای اون دو تا فاصله وجود نداره:
<img class="center" src="https://soroush.github.io/images/posts/web-devel/compressed.png" title="یک صفحهٔ فشرده شده" >
برای این کار نیاز به روش‌های مختلف فشرده‌سازی برای پروتکل‌ها
و زبان‌های
HTML، JavaScript، CSS و PHP
داریم. خوشبختانه روش‌های فشرده‌سازی برای جاوااسکریپت و سی‌اس‌اس موجود هستند.</p>

<h3>CSS و JS</h3>

<p>برنامه‌های متعددی هم برای این‌ها نوشته شده. من از برنامهٔ
<a href="http://yui.github.io/yuicompressor/">yui-compressor</a>
استفاده می‌کنم؛ چون هم می‌تونه CSS رو فشرده کنه و هم JS. برای نصبش نیازی به PPA
خاصی نداریم. مخزن‌های رسمی اوبونتو پکیج رو دارن:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install yui-compressor
</span></code></pre></td></tr></table></div></figure>


<p>حالا اگر بخوایم از این برنامه استفاده کنیم کافیه تمام فایل‌هایی رو که پسوند css
دارن به شکل بازگشتی پیدا کنیم و برنامه رو روی اون‌ها اجرا کنیم:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Compressing CSS files...&quot;</span>
</span><span class='line'><span class="k">for </span>css in <span class="sb">`</span>find . -type f -name <span class="se">\*</span>.css -print<span class="sb">`</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Compressing $css&quot;</span>
</span><span class='line'>    <span class="nv">temp</span><span class="o">=</span><span class="s2">&quot;$css.temp.css&quot;</span>
</span><span class='line'>    yui-compressor --charset utf-8 --type css <span class="s2">&quot;$css&quot;</span> -o <span class="s2">&quot;$temp&quot;</span>
</span><span class='line'>    mv <span class="nv">$temp</span> <span class="nv">$css</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>به این ترتیب تمام فایل‌های css داخل تمام دایرکتوری‌های پروژه‌مون مینیفای میشن.
اما بعد از این که تغییرات رو فرستادیم روی سرور باید همه‌چیز رو به‌حالت اول
برگردونیم. خوشبختانه برای این کار هم اسکریپت‌های خوب نوشته شده که وظیفه‌شون
ایجاد تورفتگی و مرتب کردن کدها هست. کافیه بنویسیم:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>css in <span class="sb">`</span>find . -type f -name <span class="se">\*</span>.css -print<span class="sb">`</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">temp</span><span class="o">=</span><span class="s2">&quot;$css.tmp&quot;</span>
</span><span class='line'>    cp <span class="nv">$css</span> <span class="nv">$temp</span>
</span><span class='line'>    cssunminifier <span class="nv">$temp</span> &gt; <span class="nv">$css</span>
</span><span class='line'>    rm <span class="nv">$temp</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>و اسکریپت مشابهی هم برای جاوااسکریپت به اسم
<a href="https://github.com/einars/js-beautify">js-beautify</a>
وجود داره. ولی js-beautify یه پکیج دبین نیست، بلکه می‌تونید اون رو به‌شکل یک
کتابخانهٔ پایتون یا جاوااسکریپت نصب کنید. مورد دوم رو انتخاب می‌کنیم:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm -g install js-beautify
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>و بعد:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>js in <span class="sb">`</span>find . -type f -name <span class="se">\*</span>.js -print<span class="sb">`</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span>js-beautify <span class="nv">$js</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h3>HTML و PHP</h3>

<p>متأسفانه روشی برای حداقل کردن حجم کد و حذف اضافات برای HTML و PHP وجود نداره. با
این حال می‌تونیم این کار رو خودمون به شکل دستی انجام بدیم. باید توجه داشته باشیم
که فواصل سفید (تب، فاصله و کاراکترهای مشابه) در زبان‌های HTML و PHP نقش سمنتیکی
ندارند. (از درس کامپایلر به یاد داریم که برای اکثر زبان‌ها مثل سی هم همین وضعیت
هست). یعنی ما می‌تونیم هر ترکیبی از هر تعداد فاصله، تب و نوسطر؛ به هر تعداد رو
به یک فاصله تبدیل کنیم. همچنین توی HTML فواصل بین تگ‌ها (خارج از محتوا) هیچ نقشی
ندارند و می‌تونن به راحتی حذف بشن. مثلاً هیچ فرقی نداره بنویسیم
<code>&lt;p&gt;text&lt;/p&gt;   &lt;/br&gt;</code>
یا اینکه
<code>&lt;p&gt;text&lt;/p&gt;&lt;/br&gt;</code>
پس می‌تونیم با چند تا عبارت منظم مناسب (و البته بک‌آپ گرفتن از فایل فعلی‌مون)
محتوای اضافی رو حذف کنیم. این کار نیاز به دقت زیادی داره چون عبارات منظم مقدس
هستند و با مقدسات نمیشه شوخی کرد. اسکریپت رو ببینید تا توضیحاتش رو بنویسم:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>mkdir -p ./.backups
</span><span class='line'><span class="nv">temp</span><span class="o">=</span><span class="nv">$1</span><span class="s2">&quot;.temp&quot;</span>
</span><span class='line'><span class="nv">backup</span><span class="o">=</span><span class="s2">&quot;./.backups/$1.backup&quot;</span>
</span><span class='line'>cp -r --parents <span class="nv">$1</span> ./.backups/
</span><span class='line'>sed -i -e :a -e N -e <span class="s1">&#39;s/\n/ /&#39;</span> -e ta <span class="nv">$1</span>
</span><span class='line'>sed -i -r -e <span class="s1">&#39;s/[ \t\n]+/ /g&#39;</span> <span class="nv">$1</span>
</span><span class='line'>sed -i -r -e <span class="s1">&#39;s/&gt;[ \t]+&lt;/&gt;&lt;/g&#39;</span> <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure>


<p>همون‌طور که می‌بینید این یک اسکریپت مجزا هست که اسم یک فایل رو از خط فرمان
می‌گیره و فشرده‌ش می‌کنه. توی خط <code>2</code> یک پوشه‌ای برای بکاپ‌ها می‌سازم. قراره
فایل‌های فعلی‌مون رو توی این پوشه کپی کنیم، تا بعد از فشرده‌سازی و ارسال دلتا به
سرور، بتونیم اون‌ها رو بازیابی کنیم. خط <code>5</code> به شکل بازگشتی (با کپی پوشه‌های پدر)
این کار رو برامون انجام میده. از این‌جا کار اصلی‌مون شروع میشه. خط <code>6</code> تمام
نوسطرها (یک یا چند تا پشت سر هم) رو حذف می‌کنه و تبدیل‌شون می‌کنه به یک فاصله.
مثلاً اگر شما ده بار اینتر بزنید، اون خط‌های خالی همه‌شون تبدیل میشن به یک
فاصله. خط <code>7</code> هر ترکیبی از هر تعداد فاصلهٔ سفید رو تبدیل می‌کنه به یک فاصله.
مثلاً
<code>&lt;div&gt; &lt;div&gt;&lt;/div&gt;      &lt;/div&gt;</code>
تبدیل میشه به:
<code>&lt;div&gt; &lt;div&gt;&lt;/div&gt; &lt;/div&gt;</code>.
و خط آخر هم فواصل بین تگ‌ها رو (که جزئی از محتوا حساب نمیشن) حذف می‌کنه.</p>

<h2>جمع‌بندی</h2>

<p>با جمع کردن تمام این حرف و حدیث‌ها کنار هم می‌رسیم به یک اسکریپت جامع و کامل به
که متن کاملش رو می‌تونید از <a href="">این لینک</a> دریافت کنید. طرز کار اسکریپت به این شکل
هست که شما کارتون رو انجام میدید، وقتی تصمیم گرفتید که چیزی رو آپلود کنید، فقط
کافیه تغییراتون رو توی گیت اعمال کنید و بعد اسکریپت رو به این شکل اجرا کنید:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>deploy-web &lt;username&gt; &lt;password&gt; &lt;IP&gt;
</span></code></pre></td></tr></table></div></figure>


<p>بعد همه‌چیز فشرده میشه، همه‌چیز کامیت میشه، تغییرات به سرور FTP ارسال میشه، و در
نهایت همه‌چیز برمی‌گرده به حالت اولیه :) برای حمایت مالی از این پروژه می‌تونی توی
<a href="https://github.com/soroush/web-depoly">صفحهٔ اصلی</a>
استار بزنید و یا کمک‌های مالی خودتون رو به آدرس بیتکوین <code>1NywosV5cNmcGiSqZ4zZNkvWr6G3v6kgS4</code> ارسال کنید.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[چطور پازل ۳۱ زومیت را حل کردم]]></title>
    <link href="https://soroush.github.io/blog/how-to-win-8-8-puzzle/"/>
    <updated>2014-03-21T00:00:00+03:30</updated>
    <id>https://soroush.github.io/blog/how-to-win-8-8-puzzle</id>
    <content type="html"><![CDATA[<p>اولین روز سال ۱۳۹۳ و اولین پست همین سال :) برای شروع سال چه چیزی بهتر از یه پازل
فکری می‌تونه باشه؟ امروز جمعه‌ست و اول سال با آخر هفته شروع شده. آخرهفته‌ها فرصت
مناسبی برای پروژه‌های کوچیک و جالب هست. خوب
<a href="http://www.zoomit.ir">زومیت</a>
زحمت کشیده و
<a href="http://www.zoomit.ir/howto/puzzle/10159-puzzle-thirty-one">پازل شمارهٔ ۳۱ام</a>
رو روز اول فروردین منتشر کرده. توی این پست می‌خوام توضیح بدم که چطوری این پازل
رو حل کردم. در واقع تقلب کردم. چون اولش یک برنامه‌ای نوشتم که پازل رو حل کنه :P
بعد رابطه‌ای برای تولید جواب‌ها پیدا کردم که خیلی سخت‌تر از روش اول جواب می‌داد.
منتها خوبیش اینه که اجازه میده تعداد جواب‌های موجود رو محاسبه کنیم. تعداد کل
جواب‌ها ۳۸ تا خواهد بود منتها با روش ریاضیاتی محاسبهٔ این جواب‌ها تقریباً غیر
ممکن‌ه ولی با brute force امیدواری بیشتر میشه!</p>

<p>جایزهٔ این پازل یک عدد هارد دیسک بسیار عالی هست که امیدوارم توی قرعه‌کشی قبول
بشم.</p>

<p><em>یادداشت:</em> شما قبل از پنجشنبه ساعت ۱۲ ظهر (آخرین مهلت ارسال جواب‌ها) نمی‌تونید
این پست رو بخونید! ولی دارم اینو اول فروردین می‌نویسم.</p>

<!-- more -->


<h1>صورت‌مسأله</h1>

<p>خوب اول از همه باید صورت‌مسأله رو بفهمیم: با استفاده از ۸ تا عدد هشت و عملگرهای
ریاضی، عدد ۱۰۰۰ رو تولید کنید. ساده به نظر می‌رسه اما نیست! مسأله پیدا کردن یک
چندجمله‌ای با ضرایب ۸ و متغیرهای ۸ هست که مجموع تعداد متغیرها و ضرایب برابر با ۸
باشه. و یا به‌عبارت دیگر، پیدا کردن یک چندجمله‌ای از هشت تا هشت با ضرایب ثابتِ
یک. راه حل ساده‌ای برای مسأله وجود نداره بنابراین میریم سراغ راه حل زورِ خری
(brute force).
پیشنهاد اولیهٔ من اینه که تمام دنباله‌های postfix با استفاده از 8، +، -، / و *
درست کنیم، هر کدوم رو ارزیابی کنیم، اگه برابر با ۱۰۰۰ شد، به‌عنوان یک جواب قبولش
کنیم. تا همین‌جا کلی مشکل وجود داره! اول از همه ممکنه بپرسید که خوب چرا postfix
؟ چرا همون infix سادهٔ خودمون رو استفاده نمی‌کنیم؟ خوب دلیلش اینه که ارزیابی
عبارات postfix ساده‌تره. فقط کافیه بریزیم روی یه پشته و دونه دونه محاسبه کنیم و
جایگزین کنیم.</p>

<h1>و اما مشکلات!</h1>

<p>اولین مشکل اینه که راه حلی برای تولید عبارات معتبر ندارم. (و اصولاً پردازش
اعتبارش هم صرف نمی‌کنه) مگر این که کسی بیاد و ادعا کنه که یک عبارت منظم ساده
برای اعتبارسنجی عبارات پسوندی درست کرده. تازه اونم شاید (فقط شاید!) پردازش کمتری
رو در مجموع انجام بده. اصلاً چرا شاید؟ قطعاً پردازش بیشتری خواهد داشت! خود
ارزیابی عبارت (محاسبهٔ مقدارش) خیلی سریع‌تر از چک کردن اعتبار عبارت خواهد بود.
پس با این حساب بی‌خیال مشکل اول میشیم و عبارت‌هایی مثل عبارات زیر رو هم ارزیابی
می‌کنیم:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+*/+8*8*+8+8/-8
</span><span class='line'>+++++++---++</span></code></pre></td></tr></table></div></figure>


<p>توضیح این که اولی غلطه چون اصلا با عملگر شروع شده! دومی هم غلطه چون اصلاً عملوند
نداره! خوب من نمیام بررسی کنم ببینم کدوم عبارت درسته کدوم غلطه. بلکه همین
عبارت‌های احمقانه رو هم ارزیابی می‌کنم. نهایتاً موقع ارزیابی استک پر نمیشه و
میگم حتماً عبارت غلط بوده.</p>

<p>و اما مشکل دوم! مشکل بزرگ‌تر&hellip; اندازهٔ مجموعهٔ جستجو خیلی بزرگه و ایده‌ای در
مورد اندازهٔ مجموعهٔ جواب هم نداریم! مثلاً ممکنه فقط یک جواب یکتا وجود داشته
باشه. بیاین یه حساب سرانگشتی بکنیم. اگر فرض کنیم طول رشتهٔ پسوندی ما کمتر از ۲۰
و بیشتر از ۵ باشه، در این صورت اندازهٔ مجموعه‌ای که باید پردازش کنیم برابر خواهد
بود با:
$$S=\sum_{i=5}^{20}{5^{i}}=23,841,857,909,375$$
یعنی بیست و سه تریلیارد و هشتصد و چهل و یک میلیارد و هشتصد و پنجاه و هفت میلیون
و نهصدونه‌هزار و سی‌صد و پنجاه و هفت :D عدد خیلی بزرگی هست و برای این که بفهمیم
چقدر بزرگه باید بگم که پردازش این تعداد دنباله روی کامپیوتر نسبتاً سریع من
(پردازندهٔ Corei5) چیزی حدود ۴۰۰ سال طول می‌کشه. اما چی باعث میشه که بشینیم و
برای یه همچین مقدار بزرگی کد بنویسیم؟ خیلی ساده: شانس و کمی شهود
می‌تونم ادعا کنم که یه دنبالهٔ ۵ تایی به‌هیچ وجه نمی‌تونه عدد ۱۰۰۰ رو تولید کنه
و همین‌طور دنبالهٔ ۲۰ تایی خیلی طولانی‌یه. بنابراین سعی می‌کنم دامنهٔ جستجو رو
محدود کنم. به‌جای ۵ از ۱۰ شروع می‌کنم. همچنین اول از رشته‌های ۱۵ تایی شروع
می‌کنم چون احتمال میدم جواب اون طرف‌ها باشه. بعدش میرم سراغ ۱۴ تایی‌ها و بعد ۱۶
تایی‌ها (از مرکز به طرف بیرون). اندازهٔ اولین مجموعه که باید جواب رو توش پیدا
کنم برابر میشه با:</p>

<p>$$S&#8217;=5^{15}=30,517,578,125$$
یعنی سی‌میلیارد. برآورد می‌کردم حدود ۱۰۰ ساعت وقت لازم داشته باشم. ولی با
پردازش‌های اضافی و کمی ایجاد تغییرات توی کدها، و البته محاسبهٔ تخمینی زمان
باقی‌مانده داخل کدهای برنامه، این عدد تبدیل به ۳۰۰ ساعت شد. خوب همین مقدار
امید برای شروع کافیه :)</p>

<h1>کدنویسی</h1>

<p>راستش اولش می‌خواستم با پایتون شروع کنم به نوشتن کدهای برنامه. ولی بعد به خودم
گفتم مرد باش! بشین با سی++ بنویس. حدود نیم ساعت بعد یه همچین چیزی درآوردم که زیر
می‌بینید. پیاده‌سازی کامل برنامه رو می‌تونید از این آدرس کلون کنید:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git@github.com:soroush/8-8-puzzle.git</span></code></pre></td></tr></table></div></figure>


<p>توی این کد برای اولین بار سعی کردم یک الگوریتم بازگشتی رو به‌شکل موازی
پیاده‌سازی کنم. چیزی که اولش نوشتم چندان جالب نبود ولی بعد ایدهٔ بسیار خوبی از
سایت استک گرفتم: «هر جا تصمیم به ایجاد ترد جدید گرفتی، ورودی رو کپی کن. در بقیهٔ
موارد اشاره‌گر بده به فراخوانی‌های پایین‌تر». خیلی عالی بود! خیلی خوشم اومد.
موقع پیاده‌سازی البته رودست خوردم :) توجه نکرده بودم که تردهای C++11 سطح
سیستم‌عامل نیستن. شاید هم روشی برای بردن‌شون به سطح کرنل پیدا کردم و کدها رو
تبدیل کردم.</p>

<p>قبل از توضیح کدها نتیجهٔ اجرا رو می‌خوام نشون‌تون بدم. بعد از حدود دو ساعت پردازش
تک‌هسته‌ای (روی Core2 duo) مقدار  ۰٫۱ درصد (یک هزارم!) از مجموعهٔ جستجو رو اسکن
کردم و بیست و پنج تا جواب برای مسأله پیدا کردم که خوب تعدادی‌شون هم‌ارز هستند.
برای دیدن هم‌ارزی‌شون تعدادی از جمله‌ها رو نوشتم:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>8888+*888++8/-*        (8*((8*(8+8))-((8+(8+8))/8)))
</span><span class='line'>8888+*88+8+8/-*        (8*((8*(8+8))-(((8+8)+8)/8)))
</span><span class='line'>8888+*88+8/-*8-        ((8*((8*(8+8))-((8+8)/8)))-8)
</span><span class='line'>8888+*88/-*88+-        ((8*((8*(8+8))-(8/8)))-(8+8))
</span><span class='line'>8888+*88/-*8-8-        (((8*((8*(8+8))-(8/8)))-8)-8)
</span><span class='line'>888+88+8/88*-*-        (8-((8+8)*(((8+8)/8)-(8*8))))
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>جواب‌های کامل رو می‌تونید
<a href="https://github.com/soroush/8-8-puzzle">این‌جا</a>
ببینید.</p>

<p>اول از همه کلاس اصلی برنامه:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">EightPuzzleSolver</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">EightPuzzleSolver</span><span class="p">(</span><span class="n">WINDOW</span> <span class="o">*</span><span class="n">_window</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">outFile</span><span class="p">);</span>
</span><span class='line'>    <span class="o">~</span><span class="n">EightPuzzleSolver</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">initialize</span><span class="p">(</span><span class="k">const</span> <span class="n">size_t</span> <span class="o">&amp;</span><span class="n">start</span><span class="p">,</span> <span class="k">const</span> <span class="n">size_t</span> <span class="o">&amp;</span><span class="n">end</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">start</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">setThreadCount</span><span class="p">(</span><span class="k">const</span> <span class="n">size_t</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">getResults</span><span class="p">();</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">check</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">inputs</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">permutation</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">input</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">index</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">total</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">current</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">precentage</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uint</span> <span class="n">printLine</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">size_t</span><span class="p">,</span><span class="n">size_t</span><span class="o">&gt;</span> <span class="n">range</span><span class="p">;</span>
</span><span class='line'>    <span class="n">WINDOW</span><span class="o">*</span> <span class="n">window</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">evaluation</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">symbols</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">results</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">outFile</span><span class="p">;</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">splitDepth</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">guard</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Timing</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">steady_clock</span><span class="o">::</span><span class="n">time_point</span> <span class="n">startTime</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>پیاده‌سازی تابع تولید جایگشت:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">EightPuzzleSolver</span><span class="o">::</span><span class="n">permutation</span><span class="p">(</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">input</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">index</span><span class="o">==</span><span class="n">input</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">guard</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span><span class='line'>        <span class="n">steady_clock</span><span class="o">::</span><span class="n">time_point</span> <span class="n">now</span> <span class="o">=</span> <span class="n">steady_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">ticks</span> <span class="o">=</span> <span class="n">now</span><span class="o">-</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">startTime</span><span class="p">;</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">s</span> <span class="o">=</span> <span class="n">duration_cast</span><span class="o">&lt;</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ticks</span><span class="p">).</span><span class="n">count</span><span class="p">()</span><span class="o">%</span><span class="mi">60</span><span class="p">;</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">m</span> <span class="o">=</span> <span class="n">duration_cast</span><span class="o">&lt;</span><span class="n">chrono</span><span class="o">::</span><span class="n">minutes</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ticks</span><span class="p">).</span><span class="n">count</span><span class="p">()</span><span class="o">%</span><span class="mi">60</span><span class="p">;</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">h</span> <span class="o">=</span> <span class="n">duration_cast</span><span class="o">&lt;</span><span class="n">chrono</span><span class="o">::</span><span class="n">hours</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ticks</span><span class="p">).</span><span class="n">count</span><span class="p">();</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">ms</span> <span class="o">=</span> <span class="n">duration_cast</span><span class="o">&lt;</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ticks</span><span class="p">).</span><span class="n">count</span><span class="p">();</span>
</span><span class='line'>        <span class="n">wmove</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="o">++</span><span class="n">current</span><span class="p">;</span>
</span><span class='line'>        <span class="n">precentage</span> <span class="o">=</span> <span class="mf">100.0</span><span class="o">*</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">current</span><span class="p">)</span><span class="o">/</span><span class="n">total</span><span class="p">;</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span> <span class="n">predict</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">100</span><span class="o">*</span><span class="n">ms</span><span class="o">/</span><span class="n">precentage</span><span class="p">));</span>
</span><span class='line'>        <span class="n">wprintw</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="s">&quot;Elapsed Time: %dh:%dm:%ds,&quot;</span>
</span><span class='line'>                   <span class="s">&quot; Remaining Time: %04dh:%02dm:%02ds,&quot;</span>
</span><span class='line'>                   <span class="s">&quot; Progress: %d of %.0lf (%.4f%%) sample: %s&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">h</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">s</span><span class="p">,</span>
</span><span class='line'>                <span class="n">duration_cast</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">hours</span><span class="o">&gt;</span><span class="p">(</span><span class="n">predict</span><span class="p">).</span><span class="n">count</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">duration_cast</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">minutes</span><span class="o">&gt;</span><span class="p">(</span><span class="n">predict</span><span class="p">).</span><span class="n">count</span><span class="p">()</span><span class="o">%</span><span class="mi">60</span><span class="p">,</span>
</span><span class='line'>                <span class="n">duration_cast</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="o">&gt;</span><span class="p">(</span><span class="n">predict</span><span class="p">).</span><span class="n">count</span><span class="p">()</span><span class="o">%</span><span class="mi">60</span><span class="p">,</span>
</span><span class='line'>                <span class="n">current</span><span class="p">,</span><span class="n">total</span><span class="p">,</span><span class="n">precentage</span><span class="p">,</span><span class="n">input</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>        <span class="n">wrefresh</span><span class="p">(</span><span class="n">window</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">check</span><span class="p">(</span><span class="n">input</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">wmove</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="n">printLine</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">wprintw</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="s">&quot;%d: %s&quot;</span><span class="p">,</span><span class="n">results</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">input</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>            <span class="n">results</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
</span><span class='line'>            <span class="n">outFile</span> <span class="o">&lt;&lt;</span> <span class="n">input</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="n">wrefresh</span><span class="p">(</span><span class="n">window</span><span class="p">);</span>
</span><span class='line'>            <span class="o">++</span><span class="n">printLine</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">guard</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">==</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">splitDepth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">vector</span><span class="o">&lt;</span><span class="kr">thread</span><span class="o">&gt;</span> <span class="n">threads</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">char</span> <span class="n">symbol</span> <span class="o">:</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">symbols</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">input</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">symbol</span><span class="p">;</span>
</span><span class='line'>            <span class="n">threads</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">([</span><span class="o">=</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">string</span> <span class="n">cpy</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
</span><span class='line'>                <span class="n">permutation</span><span class="p">(</span><span class="n">cpy</span><span class="p">,</span> <span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kr">thread</span><span class="o">&amp;</span> <span class="nl">t:</span> <span class="n">threads</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">t</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">char</span> <span class="n">symbol</span> <span class="o">:</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">symbols</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">input</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">symbol</span><span class="p">;</span>
</span><span class='line'>            <span class="n">permutation</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>و تابع ارزیابی عبارت پسوندی:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">bool</span> <span class="n">EightPuzzleSolver</span><span class="o">::</span><span class="n">check</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">inputs</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">evaluation</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">evaluation</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">n:</span> <span class="n">inputs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">evaluation</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">n1</span> <span class="o">=</span> <span class="n">evaluation</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">evaluation</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">evaluation</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">n2</span> <span class="o">=</span> <span class="n">evaluation</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">evaluation</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">evaluation</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">n2</span><span class="o">+</span><span class="n">n1</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">evaluation</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">n1</span> <span class="o">=</span> <span class="n">evaluation</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">evaluation</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">evaluation</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">n2</span> <span class="o">=</span> <span class="n">evaluation</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">evaluation</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">evaluation</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">n2</span><span class="o">-</span><span class="n">n1</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;*&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">evaluation</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">n1</span> <span class="o">=</span> <span class="n">evaluation</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">evaluation</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">evaluation</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">n2</span> <span class="o">=</span> <span class="n">evaluation</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">evaluation</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">evaluation</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">n2</span><span class="o">*</span><span class="n">n1</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;/&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">evaluation</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">n1</span> <span class="o">=</span> <span class="n">evaluation</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">evaluation</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">evaluation</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">n2</span> <span class="o">=</span> <span class="n">evaluation</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">evaluation</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">n1</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">evaluation</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">n2</span><span class="o">/</span><span class="n">n1</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;8&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="n">evaluation</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">evaluation</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">==</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">evaluation</span><span class="p">.</span><span class="n">top</span><span class="p">()</span><span class="o">==</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>و در نهایت پیاده‌سازی تابع شروع کننده:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">EightPuzzleSolver</span><span class="o">::</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">length</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">range</span><span class="p">.</span><span class="n">second</span><span class="p">;</span> <span class="n">length</span><span class="o">&gt;</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">range</span><span class="p">.</span><span class="n">first</span><span class="p">;</span> <span class="o">--</span><span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">wmove</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'>        <span class="n">current</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">precentage</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">wprintw</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="s">&quot;Checking strings of length: %d&quot;</span><span class="p">,</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'>        <span class="n">wmove</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">wprintw</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="s">&quot;Total: %.0lf&quot;</span><span class="p">,</span><span class="n">pow</span><span class="p">(</span><span class="mf">5.0</span><span class="p">,</span><span class="n">length</span><span class="p">));</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">input</span><span class="p">(</span><span class="n">length</span><span class="p">,</span><span class="sc">&#39;8&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">startTime</span> <span class="o">=</span> <span class="n">steady_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
</span><span class='line'>        <span class="n">permutation</span><span class="p">(</span><span class="n">input</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[نصب آسان نرم‌افزار از طریق Qt Creator]]></title>
    <link href="https://soroush.github.io/blog/qt-creator-deploy/"/>
    <updated>2014-02-28T00:00:00+03:30</updated>
    <id>https://soroush.github.io/blog/qt-creator-deploy</id>
    <content type="html"><![CDATA[<p>روند کلی توسعهٔ نرم‌افزار با استفاده از ساختارهای کیوت خیلی سرراست و ساده هست.
با این وجود ممکنه گاهی اوقات بعضی کارهای تکراری کسل‌کننده به‌نظر برسه. همگی
می‌دونیم که کسل‌کنندگی بزرگترین دشمن گیک‌ها (و البته گیگتوپوس‌ها) هست. خوشبختانه
توسعه‌دهنده‌های کیوت‌کریتور همگی گیک هستند و راه‌حل‌های مؤثری برای این کارها
درنظر گرفته شده.</p>

<p>اگر بخوایم یه کتابخانهٔ جدید رو با استفاده از کیوت بنویسیم، مسلماً بعد از یه
مدتی دلمون می‌خواد که تست‌ش کنیم. خوب بهترین راه تست کردن یه کتابخونه اینه که
اونو روی سیستم نصب کنیم و سوئیت تست رو اجرا کنیم. (البته اگر سوئیت تست براش
نوشته باشیم!) روال کلی نصب به این شکله که شما اول دستور make رو اجرا می‌کنید،
اگر برنامه درست کامپایل شد و همه‌چیز به‌خوبی پیش رفت، دستور sudo make install رو
وارد می‌کنید. با این دستور کتابخونهٔ شما در مسیرهای پیش‌فرض (که qmake به make
گفته و make از سیستم یاد گرفته) نصب میشه.</p>

<p>مشکل از جایی شروع میشه که یکی بخواد از متدولوژی TDD برای توسعهٔ نرم‌افزارش
استفاده کنه. در این صورت کوچک‌ترین تغییری که توی کدها ایجاد کنه باید تست بشه؛ و
برای تست کل کارهای کسل‌کنندهٔ بالا باید تکرار بشه. خوب ما می‌خوایم راهی داشته
باشیم که دیگه ترمینال رو باز نکنیم و هی دستورات تکراری توش ننویسیم. توی این پست
راه‌حلی رو معرفی می‌کنم که مستقیماً از طریق کریتور و بدون باز کردن ترمینال
بتونیم برنامه‌مون رو روی سیستم (با دسترسی روت) نصب کنیم :)</p>

<!-- more -->


<p>برای این کار از روش Deployment استفاده می‌کنیم. برای این کار از نوار کناری
برگهٔ Project رو انتخاب کنید. (و یا کلید Ctrl+5 رو بزنید) از  صفحهٔ از
قسمت‌کیت‌ها Run رو انتخاب کنید. (بغل‌دست Build) (موتعسفانه کلید میان‌بر نداره)
خوب از قسمت Run Settings می‌تونیم بخش Deployment رو ببینیم. این‌جا به‌طور
پیش‌فرض یک پیکربندی خالی وجود داره که هیچ دستوری رو اجرا نمی‌کنه و طبیعتاً هیچ
کاری هم انجام نمیده:
<img class="center" src="https://soroush.github.io/images/posts/qt-creator-deploy.png" title="تنظیمات Deploy" ></p>

<p>۱. روی دکمهٔ Rename کلیک می‌کنیم و یه اسم درست و حسابی برای کانفیگ‌مون انتخاب
می‌کنیم. مثلاً Local Installation.<br/>
۲. از قسمت Add Deploy Step گزینهٔ Custom Process Step رو انتخاب می‌کنیم.<br/>
توی جعبهٔ ایجاد شده سه تا پارامتر هست. اولی (Command) دستوری رو که می‌خوایم اجرا
بشه مشخص می‌کنه. دومی (Arguments) همون‌طور که از اسمش تابلوئه، آرگومان‌های اون
دستور رو مشخص می‌کنه. اما سومی (Working Directory) مکانی رو که می‌خوایم دستورمون
توش اجرا بشه رو مشخص می‌کنه. می‌تونیم یه آدرس صریح بهش بدیم، و یا اینکه از
متغیرهای تعریف شده استفاده کنیم. متغیرها خیلی بهترن.<br/>
۳. خوب دستوری که می‌خوایم اجرا کنیم sudo هست با آرگومان‌های make install اون هم
در مسیری که کتابخونه‌مون رو توش build کردیم. مشکلی که داریم اینه که sudo رابط
کاربری نیست و پسورد روت رو توی ترمینال (stdin) می‌گیره. خوب ما هم که می‌خواستیم
کلاً ترمینال باز نکنیم! پس از رابط‌های سودو که DE مون مهیا می‌کنه استفاده
می‌کنیم. دسکتاپ من KDE هست پس به‌جای sudo می‌نویسم kdesuo. اگر محیط کاری شما
گنوم هست از gksu استفاده کنید. در آخر یه همچین چیزی میشه:</p>

<p><img class="center" src="https://soroush.github.io/images/posts/qt-creator-deploy-settings.png" title="دستوری که می‌خواهیم اجرا کنیم" ></p>

<p>حالا اگر از منوی Build گزینهٔ Deploy Project رو بزنیم، ازمون پسورد روت پرسیده
میشه و کل کتابخونه‌ها (یا برنامه‌مون) توی سیستم نصب میشه:</p>

<p><img class="center" src="https://soroush.github.io/images/posts/qt-creator-deploy-in-menu.png" title="آیتم Deploy در منو" >
و</p>

<p><img class="center" src="https://soroush.github.io/images/posts/qt-creator-deploy-kdesu.png" title="پرسیدن پسورد روت توسط kdesu" ></p>

<p>با این حال میشه حد و مرزهای تنبلی رو فراتر هم برد مثلاً من به عنوان یک گیگتوپوس
جوان حوصله نمی‌کنم گزینه‌ای رو از بین منوها پیدا کنیم و روش کلیک کنم. برای همین
برای Deploy یک کلید میان‌بُر تعیین می‌کنم که با زدن اون کلید کتابخونه‌مو نصب
کنم. برای این کار از منوی Tools آخرین آیتم یعنی Options رو انتخاب کنید، از
پنجرهٔ باز شده، توی تب کناری، اولین آیتم (یعنی Environment) رو انتخاب کنید، از
تب وسط صفحه، برگهٔ Keyboar رو باز کنید. حالا توی قسمت Filter بنویسید Deply که
راحت‌تر پیدا کنید. از لیست فیلتر شده آیتم Deploy رو انتخاب کنید و توی
قسمت Key Sequence کلید میان‌بری رو که می‌خواید براش انتصاب بشه، بزنید. مثلاً من
زدم Ctrl+Shift+D :</p>

<p><img class="center" src="https://soroush.github.io/images/posts/qt-creator-deploy-options.png" title="کلید میان‌بُر" ></p>

<p>خوب این تنظیمات برای نصب کتابخانهٔ نرم‌افزاری روی سیستم‌های مبتنی‌بر لینوکس بود. تقریباً همهٔ برنامه‌هایی که من می‌نویسم چندسکویی هستند بنابراین باید برای ویندوز هم بتونم روال مشابه رو تکرار کنم. برای این کار تمام مراحل قبلی رو با یک کانفیگ جدید به اسم MinGW Install انجام میدم. پارامترها این‌ها خواهند بود:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Command: mingw32-make
</span><span class='line'>Arguments: install INSTALL_ROOT=c:/mingw64/
</span><span class='line'>Working Directory:%{buildDir}</span></code></pre></td></tr></table></div></figure>


<p>در واقع امکانات توزیع در کریتور برای توزیع نرم‌افزارها با روش‌های بومی پلتفرم‌ها
درنظر گرفته شده. ولی چیزی نمی‌تونه باعث بشه که ازش به منظور دیگه‌ای استفاده
نکنیم. مثلاً توزیع نرم‌افزار روی سیستم خودمون و یا حتا برای ساخت پکیج‌های
نرم‌افزاری بومی به شکلی کاملاً اتوماتیک :) دقت داشته باشید که می‌تونید هر تعداد
کانفیگ برای توزیع نرم‌افزارتون داشته باشید. مثلاً میشه با این کانفیگ از روی یک
ریلیز خاص سورس، تاربال درست کرد:</p>

<p><img class="center" src="https://soroush.github.io/images/posts/qt-creator-deploy-make-tarball.png" title="ساخت tarball از روی نسخهٔ ۰٫۱٫۳" ></p>

<p>من همیشه برنامه‌های متن‌بازم رو پکیج می‌کنم و روی یک رپوزیتوری دبین شخصی (PPA)
روی اینترنت می‌ذارم. همین کار رو هم میشه مستقیم از طریق کریتور انجام داد! تعداد
مراحلش خیلی بیشتره برای همین توضیح نمیدم. نتیجه‌ش این میشه که مستقیم از روی سور
پکیج می‌سازم، اون پکیج رو مستقیم با کلید خصوصی‌م رمز می‌کنم، می‌ذارمش روی
لانچپد! و همهٔ این کارها رو تنها با زدن کلید Ctrl+Shift+D انجام میدم :) این‌ها
پکیج‌هایی هستند که با این روش ساختم و روی رپوزیتوری
<a href="https://launchpad.net/~soroush-r/+archive/solap">SOLAP</a> (Soroush&rsquo;s own
Libraries and Programs)
منتشر کردم:
<img class="center" src="https://soroush.github.io/images/posts/solap.png" title="پکیج‌های رپوزیتوری شخصی من" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[چرا سی‌شارپ بد است؟]]></title>
    <link href="https://soroush.github.io/blog/why-cs-is-bad/"/>
    <updated>2014-01-24T00:00:00+03:30</updated>
    <id>https://soroush.github.io/blog/why-cs-is-bad</id>
    <content type="html"><![CDATA[<p>همون‌طور که می‌دونید محصولات مایکروسافت و به‌ویژه زبان سی‌شارپ بین
برنامه‌نویس‌های کشورمون طرف‌دارهای خیلی زیادی داره. فکر نمی‌کنم هیچ کشوری
دیگه‌ای مثل ایران صنعت نرم‌افزاری شرکت‌محور داشته باشه.
این پست قرار نیست یک پست یک‌طرفه در مورد بد بودن مایکروسافت و دفاع از آزادی
نرم‌افزار، نوشته شده از طرف یک گنو/لینوکسی دوآتیشه باشه :) من مدت‌ها با سی‌شارپ
کد نوشتم و پروژه‌هایی رو هم تحویل مشتری دادم. بعدها به‌طور کامل به سی++ و کیوت
مهاجرت کردم. حدود سال ۸۹ بود که آخرین کارم رو با سی‌شارپ انجام دادم. دو ماه پیش
به فکرم رسید که مدت‌هاست خبری از مایکروسافت و محصولاتش ندارم. بهتره یه سری بزنم
و ببینم چه تکنولوژی‌هایی معرفی کردن و یا محصولات قبلی رو تا کجا پیش بردن.</p>

<p>نتیجه‌ای که گرفتم این بود که مایکروسافت از سال ۲۰۱۱ به این‌طرف تغییر اساسی‌ای
توی محصولاتش منتشر نکرده. البته اگر از برنامه‌نویس‌های دات‌نتی بپرسید دقیقاً
خلاف این موضوع رو به شما میگن :) در ادامه بیشتر توضیح میدم. اما اول می‌خوام
دلایل عدم استفاده از محصولات کمپانی‌هایی مثل مایکروسافت رو توضیح بدم. این کار رو
با یک مثال شروع می‌کنم. مثالی که به شکل تحلیلی و براساس تخصص اصلی‌م
(برنامه‌نویسی) نوشته شده. دلایل این که زبان سی‌شارپ زبان بدی هست رو می‌خوام
توضیح بدم.</p>

<!-- more -->


<h2>۱. معماری بسیار بد</h2>

<p>برای شروع باید به معماری و چرخهٔ کاری برنامه‌های دات‌نت نگاهی بکنیم. زبان مورد
مطالعهٔ ما زبان سی‌شارپ هست. سی‌شارپ عضوی از خانوادهٔ زبان‌های دات‌نت. این
زبان‌ها فقط یک کامپایلر دارن. (مونو رو به‌حساب نمی‌آریم) این کامپایلر جزئی از
مجموعه‌ای بزرگ‌تر هست به اسم دات‌نت. باید توجه داشته باشیم که دات‌نت یک کتابخانه
نیست بلکه یک چهارچوب کاری یا همون framework هست. دقیقاً نقطه ضعف معماری
مایکروسافت هم همین‌جاست. این فریم‌ورک به بدترین شکل ممکن ساخته شده. ایرادات
زیادی توش وجود داره که بعضی‌ها رو توضیح میدم.</p>

<p>اول این که یک زبان واسط بیهوده وجود داره به اسم IL. کدهای سی‌شارپ به کد ماشین
ترجمه نمی‌شن و مستقیماً به کد IL ترجمه میشن. سیستم‌عامل نمی‌تونه کد میانی رو
اجرا کنه (برای همینه که شما نمی‌تونید بدون نصب دات‌نت فریم‌ورک روی کامپیوتر
مقصد، برنامه‌هاتون رو منتشر کنید). یعنی مایکروسافت حتا به ABI سیستم‌عامل خودش هم
احترام نذاشته و یه واسط بین سیستم‌عامل و برنامه ایجاد کرده. اما چرا؟ دلیل این
کار به طور مشخص همگردانی راحت‌تر بین زبان‌های خانوادهٔ دات‌نت هست. اما دلیلی که
خود کمپانی توضیح میده خیلی خنده‌دارتره. اون‌ها میگن ما این کار رو به خاطر
پیاده‌سازی امکانات چندسکویی انجام دادیم! این دقیقاً یک جوک هست. برنامه‌های نوشته
شده با محصولات مایکروسافت رو هیچ‌جور نمی‌تونید روی سیستم‌عامل‌های دیگه مثل
مک‌اواس و یا گنو/لینوکس اجرا کنید. پس چندسکویی یعنی چی؟ باید از مدیران
مایکروسافت بخوایم که برامون توضیح بدن منظورشون از سکو (همون پلتفرم) چی بوده.
شاید ویندوزهای مختلف رو سکوهای مختلف حساب می‌کنن!</p>

<p>اما چرا مایکروسافت باید چندین زبان رو در یک مجموعه داشته باشه؟ هیچ دلیل مهندسی
پشت این قضیه نیست. تنها چیزی که مطرح‌ه تبلیغات و بازاریابی هست. اساساً وجود
داشتن زبان‌هایی که مایکروسافت تولید کرده هیچ توجیهی غیر از منافع تبلیغاتی نداره!
چون از لحاظ سیستمی دقیقاً هیچ تفاوتی بین J#، Visual Basic .NET، C++.NET و
سی‌شارپ وجود نداره. تنها سینتکس این زبان‌ها با همدیگه فرق داره. توی پاراگراف
قبلی توضیح دادم که تمام زبان‌های دات‌نت به IL ترجمه میشن؛ حالا فقط می‌خوام اضافه
کنم که ساختارهای سمنتیک این زبان‌ها هم دقیقاً یکسان هستند. بنابراین  مایکروسافت
می‌تونه تمام زبان‌های مجموعهٔ دات‌نت رو حذف کنه و به‌جاشون فقط سی‌شارپ (یا هر
کدوم رو که دوست داشت) رو نگه داره. توجه داشته باشید که زبان Visual C++ رو
با Visual C++.NET اشتباه نگیرید. کامپایلر مایکروسافت استاندارد سی++ رو کم و بیش
پیاده‌سازی کرده و باید خاطرمون نگه داریم که سی++ جزئی از دات‌نت نیست
اما VC++.NET جزئی از دات‌نت هست.</p>

<h2>۲. کارایی پایین</h2>

<p>همهٔ ما می‌دونیم که زبان سی‌شارپ زبان بسیار کندی هست. اگه نمی‌دونیم می‌تونیم چند
تا بنچمارک ساده بنویسیم :) شخصاً تعداد زیادی از این بنچمارک‌ها رو نوشتم و تست
کردم. شما اگر ساده‌ترین
برنامه‌ها رو با سی‌شارپ بنویسید و اجرا کنید مشاهده می‌کنید که مقدار خیلی زیادی
حافظه براشون گرفته شده و پردازش خیلی زیادی از سی‌پی‌یو رو می‌گیرن. یکی از دلایل
این وضعیت همون واسط اضافی هست که بین سیستم‌عامل و برنامه قرار گرفته. اما دلیل
اصلی پیاده‌سازی بد کامپایلر هست. کامپایلر سی‌شارپ در مقایسه با کامپایلرهای
قوی‌تر مثل GCC پیاده‌سازی خیلی ابتدایی‌تری داره. البته باید توجه داشته باشیم که
بهینه‌سازی Backend توی
کامپایلرهای مایکروسافت خیلی قوی‌تر از گنو هست. دلیل‌ش اینه که سازندهٔ ABI و
سازندهٔ Compiler زیر سقف یک شرکت هستند و همچنین اون ABI به‌طور کامل منتشر نشده
(که کس دیگه‌ای مثل افراد گنو بیان و بهتر از مهندس‌های مایکروسافت براش کامپایلر
بسازن). با این وجود بهینه‌سازی Frontend در GCC به مراتب
قوی‌تر از .NET انجام شده. چرا؟ چون GCC رو آدم‌های بسیار باسواد می‌نویسند و تعداد
مغزهایی که روی پروژه‌های گنو کار می‌کنند بیشتر از تعداد کل مهندس‌های گروه توسعهٔ
کامپایلر در کمپانی مایکروسافت هست.</p>

<h2>۳. محصولات حبابی</h2>

<p>یادداشت پس از نگارش: قبول دارم که خیلی دارم به مایکروسافت فشار میارم و خیلی ازش
بد میگم :) ولی واقعاً هیچ مشکل شخصی‌ای با این کمپانی ندارم و بیل گیتس رو هم خیلی
دوسش دارم.</p>

<p>مایکروسافت گورستان محصولات/پروتکل‌ها و ابزارهاست. چیزهایی که مایکروسافت می‌سازه
خیلی زود محبوبیت‌شون رو از دست میدن و استفاده‌کننده‌ها مجبور هستند چیزهای جدیدی
رو با اون‌ها جایگزین کنند. اگه یک برنامه‌نویس سابقه‌دار در ایران باشید می‌دونید
که در مورد چی صحبت می‌کنم. چیزهایی زمانی به‌شدت مد بودند اما امروز کاملاً محو
شدند. الان مُد روز استفاده از WPF برای رابط کاربری هست. همچنین امکانات جدیدی که
در نسخهٔ جدیدی سی‌شارپ اضافه شده. قبل از WPF اما چیز دیگری
رایج بود: Windows Forms. و قبل از اون MFC و قبل از اون ALT و قبل از اون COM+ و
قبل از اون هم COM و بسیاری تکنولوژی‌های دیگه که کاملاً با همدیگه متفاوت بودند و
هرکدوم مدت کوتاهی بعد از معرفی شدن از مد افتادن. خوب مایکروسافت چرا این کار رو
می‌کنه؟ برای تبلیغات. چون یک محصول هر چقدر هم که خوب باشه ارزش تبلیغاتی‌ش رو بعد
از یکی دو سال از دست میده. اون‌ها باید با معرفی چیزهای جدید و به‌دردنخور بازار
رو مشغول نگه دارند. البته اشتغالی از نوع عبث. این کار اون‌ها تأثیر خیلی منفی‌ای
روی برنامه‌نویس‌ها می‌ذارن: به‌عنوان کسی که شغلش مهندسی نرم‌افزار (بخش تولید)
هست شما باید عمر کاری‌تون رو با نوشتن برنامه‌ها بگذرونید. هر چند وقت یک‌بار هر
چیزی که یاد گرفته بودید هیچ میشه و باید از نو (نه از صفر) شروع کنید. هیچ تضمینی
وجود نداره که این تکنولوژی‌ای که شما استفاده می‌کنید، دو سال بعد هم خریدار داشته
باشه. بنابراین همواره در حال یادگیری و تست کردن چیزهای جدید خواهید بود. البته
منکر این نیستم که امتحان کردن چیزهای جدید خوبه اما بد نیست به فکر اعصاب خودمون
در بلند مدت هم باشیم.</p>

<p>روی دیگهٔ سکه چه کسانی هستند؟ مردان و زنان باایمانی که از سی++ و استاندارها
استفاده می‌کنن :) اگه یه چیزی خیلی خوب طراحی شده باشه، مدت خیلی زیادی دوام
میاره. مثلاً پروتکل TCP رو درنظر بگیرید. نزدیک چهل سال از معرفی اولین RFC ی TCP
می‌گذره. تو این مدت چه تغییری کرده؟ تقریباً هیچی! فقط دو تا بهینه‌سازی خیلی جزئی
اضافه کردند. همچنین زبان سی++ رو درنظر بگیرید. این زبان طی سی سال گذشته تغییر
چندانی نکرده. جز این که سال ۲۰۱۱ (بعد از بیست و اندی سال) استاندارد جدید رو
معرفی کردند. بنابراین من به‌عنوان یک برنامه‌نویس متوسط سی++ می‌تونم اطمنان داشته
باشم که کدی که می‌نویسم حداقل طی چهل سال آینده کامپایل میشه و کامپایلر خواهد
داشت :)</p>

<p>خوب فکر می‌کنم برای یک پست شب‌جمعه‌ای به‌قدر کافی وراجی کرده باشم. بقیهٔ ماجرا
رو بعداً تعریف می‌کنم. راستی نظرات‌تون رو دریغ نکنید.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[سردرگمی]]></title>
    <link href="https://soroush.github.io/blog/confusing/"/>
    <updated>2013-12-20T00:00:00+03:30</updated>
    <id>https://soroush.github.io/blog/confusing</id>
    <content type="html"><![CDATA[<p>امروز ۲۹ آذرماه ۱۳۹۲ هست و من همچنان درسم تموم نشده. بعد از این که فرصت کار توی
گوگل رو از دست دادم، دیگه اهمیت چندانی نداره که کی و چطوری ته‌موندهٔ واحدها رو
تموم کنم. تیرماه سال آینده  به‌طور کامل خلاص میشم.</p>

<p>برای دوران بعد از درس خوندن نمی‌دونم چی‌کار باید بکنم. هیچ برنامه‌ریزی‌ای به‌طور
بی‌نقص پیش نمی‌ره و هیچ‌چیز رو نمی‌شه پیش‌بینی کرد. فعلاً گزینه‌های موجود این‌ها
هستند:</p>

<h4>۱. درس خوندن برای کنکور ارشد (فوق لیسانس داخل کشور)</h4>

<p>امیدم برای زندگی این‌جا خیلی کمه. این‌جا هیچ آیندهٔ موفقی رو برای خودم متصور
نیستم. هیچ دوست ندارم بمونم اما رفتن هم خیلی سخته.</p>

<h4>۲. درس خوندن برای دانشگاه بوخوم آلمان (رزرو پوزیشن RA برای سال ۲۰۱۶)</h4>

<p>طی مکاتباتی که با دانشگاه انجام دادم، گفتن برای ۲۰۱۴ و ۲۰۱۵ رزرو ندارن اما برای
۲۰۱۶ هست. ۲۰۱۶ هم خیلی دیره :( دو سال رو بمونم کار کنم یا چی نمی‌دونم&hellip;</p>

<h4>۳. کار کردن توی دانشگاه</h4>

<p>پیشنهادی که مطرح شده و رزومه هم دادم. ظاهراً قراردادی خواهد بود. در مورد مبلغ و
ساعات کار  و ماهیت کار پیشنهاد شده اطلاع دقیق ندارم.</p>

<h4>۴. کار کردن تو شرکت خودم</h4>

<p>شرکتی که تازه تأسیس کردیم خیلی شرکت قوی و خوبی هست. کارهای خوبی می‌تونیم انجام
بدیم اما به مافیا برخورد کردیم و با آقازاده‌ها مشکل داریم. اینجوریه که درآمد
چندانی هم نمی‌تونیم داشته باشیم.</p>
]]></content>
  </entry>
  
</feed>
